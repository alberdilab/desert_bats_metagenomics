[["index.html", "AlberdiLab | Aizpurua et al. in prep Desert bats metagenomics Chapter 1 Introduction 1.1 Prepare the R environment", " AlberdiLab | Aizpurua et al. in prep Desert bats metagenomics Ostaizka Aizpurua1 Evie Morris Raphael Eisenhofer2 Lasse Nyholm Antton Alberdi3 Orly Razgour4 2024-04-18 Chapter 1 Introduction This webbook contains all the code used for the study on the comparison of 16S amplicon sequencing and genome-resolved metagenomics in desert bats. 1.1 Prepare the R environment 1.1.1 Environment To reproduce all the analyses locally, clone this repository in your computer using: RStudio &gt; New Project &gt; Version Control &gt; Git And indicating the following git repository: https://github.com/alberdilab/desert_bats_metagenomics.git Once the R project has been created, follow the instructions and code chunks shown in this webbook. 1.1.2 Libraries The following R packages are required for the data analysis. # Base library(R.utils) library(knitr) library(tidyverse) library(devtools) library(tinytable) library(rairtable) # For tree handling library(ape) library(phyloseq) library(phytools) # For plotting library(ggplot2) library(ggrepel) library(ggpubr) library(ggnewscale) library(gridExtra) library(ggtreeExtra) library(ggtree) library(ggh4x) # For statistics library(spaa) library(vegan) library(Rtsne) library(geiger) library(hilldiv2) library(distillR) library(ANCOMBC) library(lme4) University of Copenhagen, ostaizka.aizpurua@sund.ku.dk↩︎ University of Copenhagen, raphael.eisenhofer@sund.ku.dk↩︎ University of Copenhagen, antton.alberdi@sund.ku.dk↩︎ University of Exeter, o.razgour@exeter.ac.uk↩︎ "],["prepare-data.html", "Chapter 2 Prepare data 2.1 Load data", " Chapter 2 Prepare data 2.1 Load data Load the original data files outputted by the bioinformatic pipeline. To be added "],["prepare-data-1.html", "Chapter 3 Prepare data 3.1 Load data 3.2 Create working objects 3.3 Prepare color scheme 3.4 Wrap working objects", " Chapter 3 Prepare data 3.1 Load data Load the original data files outputted by the bioinformatic pipeline. 3.1.1 Sample metadata sample_metadata &lt;- read_tsv(&quot;data/metagenomics/sample_metadata.tsv&quot;) 3.1.2 Read counts read_counts &lt;- read_tsv(&quot;data/metagenomics/read_counts.tsv&quot;) 3.1.3 Genome coverage genome_coverage &lt;- read_tsv(&quot;data/metagenomics/genome_coverage.tsv&quot;) 3.1.4 Genome taxonomy genome_taxonomy &lt;- read_tsv(&quot;data/metagenomics/genome_taxonomy.tsv&quot;) %&gt;% select(user_genome,classification) %&gt;% separate(classification, c(&quot;domain&quot;,&quot;phylum&quot;,&quot;class&quot;,&quot;order&quot;,&quot;family&quot;,&quot;genus&quot;,&quot;species&quot;), sep =&quot;;&quot;) %&gt;% rename(genome=1) %&gt;% mutate(genome = str_remove(genome, &quot;\\\\.fa$&quot;)) 3.1.5 Genome quality genome_quality &lt;- read_tsv(&quot;data/metagenomics/genome_quality.tsv&quot;) 3.1.6 Genome metadata genome_metadata &lt;- inner_join(genome_taxonomy,genome_quality,by=join_by(genome==genome)) %&gt;% select(-c(lineage,binner)) %&gt;% rename(length=size) 3.1.7 Genome tree genome_tree &lt;- read_tree(&quot;data/metagenomics/genome_tree.tre&quot;) genome_tree$tip.label &lt;- str_replace_all(genome_tree$tip.label,&quot;&#39;&quot;, &quot;&quot;) #remove single quotes in MAG names genome_tree$tip.label &lt;- str_remove(genome_tree$tip.label, &quot;\\\\.fa$&quot;) #remove .fa suffix genome_tree &lt;- keep.tip(genome_tree, tip=genome_taxonomy$genome) # keep only MAG tips 3.1.8 Genome annotations genome_annotations &lt;- read_tsv(&quot;data/metagenomics/genome_annotations.tsv.xz&quot;) %&gt;% rename(gene=1, genome=2, contig=3) 3.1.9 Preprocessing statistics sample_preprocessing &lt;- read_tsv(&quot;data/metagenomics/preprocessing_stats.tsv&quot;) %&gt;% mutate(host_bases=host_reads*300) 3.2 Create working objects Transform the original data files into working objects for downstream analyses. 3.2.1 Filter reads by coverage min_coverage=0.3 read_counts_filt &lt;- genome_coverage %&gt;% mutate(across(where(is.numeric), ~ ifelse(. &gt; min_coverage, 1, 0))) %&gt;% mutate(across(-1, ~ . * read_counts[[cur_column()]])) 3.2.2 Transform reads into genome counts readlength=150 genome_counts &lt;- read_counts %&gt;% mutate(across(where(is.numeric), ~ . / (genome_metadata$length / readlength) )) readlength=150 genome_counts_filt &lt;- read_counts_filt %&gt;% mutate(across(where(is.numeric), ~ . / (genome_metadata$length / readlength) )) 3.2.3 Distill annotations into GIFTs genome_gifts &lt;- distill(genome_annotations,GIFT_db,genomecol=2,annotcol=c(9,10,19), verbosity=F) Identifiers in the annotation table: 1810 Identifiers in the database: 1547 Identifiers in both: 259 Percentage of annotation table identifiers used for distillation: 14.31% Percentage of database identifiers used for distillation: 16.74% 3.3 Prepare color scheme AlberdiLab projects use unified color schemes developed for the Earth Hologenome Initiative, to facilitate figure interpretation. phylum_colors &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% arrange(match(genome, genome_tree$tip.label)) %&gt;% select(phylum, colors) %&gt;% unique() %&gt;% arrange(phylum) %&gt;% pull(colors, name=phylum) 3.4 Wrap working objects All working objects are wrapped into a single Rdata object to facilitate downstream usage. save(sample_metadata, sample_preprocessing, genome_metadata, read_counts, genome_counts, genome_counts_filt, genome_tree, genome_gifts, phylum_colors, file = &quot;data/data.Rdata&quot;) "],["data-statistics.html", "Chapter 4 Data statistics 4.1 Sequencing reads statistics 4.2 DNA fractions", " Chapter 4 Data statistics load(&quot;data/data.Rdata&quot;) 4.1 Sequencing reads statistics sample_preprocessing %&gt;% summarise(Total=sum(reads_post_filt * 150 / 1000000000) %&gt;% round(2), mean=mean(reads_post_filt * 150 / 1000000000) %&gt;% round(2), sd=sd(reads_post_filt * 150 / 1000000000) %&gt;% round(2)) %&gt;% unite(&quot;Average&quot;,mean, sd, sep = &quot; ± &quot;, remove = TRUE) %&gt;% tt() tinytable_h14bn9y8bxkz346iokzl .table td.tinytable_css_os3pwszo911djkamv39r, .table th.tinytable_css_os3pwszo911djkamv39r { border-bottom: solid 0.1em #d3d8dc; } Total Average 712.18 7.83 ± 8.08 4.2 DNA fractions sequence_fractions &lt;- read_counts %&gt;% pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;value&quot;) %&gt;% group_by(sample) %&gt;% summarise(mags = sum(value)) %&gt;% left_join(sample_preprocessing, by = join_by(sample == sample)) %&gt;% select(sample,mags,bases_pre_filt,bases_post_filt,host_bases,metagenomic_bases) %&gt;% mutate(mags_bases = mags*150) %&gt;% mutate(lowqual_bases = bases_pre_filt - bases_post_filt) %&gt;% mutate(unmapped_bases = metagenomic_bases - mags_bases) %&gt;% mutate(unmapped_bases = ifelse(unmapped_bases &lt; 0, 0, unmapped_bases)) %&gt;% select(sample, lowqual_bases, host_bases, unmapped_bases, mags_bases) sequence_fractions %&gt;% mutate_at(vars(-sample), ~./1000000000) %&gt;% rename(&quot;Sample&quot;=1, &quot;Low quality&quot;=2, &quot;Mapped to host&quot;=3, &quot;Unmapped&quot;=4, &quot;Mapped to MAGs&quot;=5) %&gt;% tt() tinytable_e4eoyx4xc9oh3duzl3jd .table td.tinytable_css_qysdmp9hs3vehriy2442, .table th.tinytable_css_qysdmp9hs3vehriy2442 { border-bottom: solid 0.1em #d3d8dc; } Sample Low quality Mapped to host Unmapped Mapped to MAGs E01 1.9123757 1.7193909 0.50379365 1.83467325 E02 0.4353280 4.2158016 0.99338589 0.02671065 E03 1.3042313 1.7994078 6.42222236 0.01078875 E16 0.4224530 0.1025580 0.20197846 4.93816200 E18 4.7850204 6.9637290 24.05986617 0.52864665 E21 1.0156349 2.6368389 0.90981533 0.10217775 E24 3.7280695 1.1110971 23.81060939 2.34316305 E25 1.5376473 7.9804608 6.00871944 0.85221990 E27 0.4230030 0.0911577 1.95160083 0.44069160 E28 1.6079642 1.0844487 4.47911541 0.19568490 E30 1.7928992 1.4413299 4.00947792 5.12918235 E31 0.6816818 0.0320553 0.50570530 2.84763450 E34 2.1948529 0.8249310 11.67502744 2.54218275 E38 0.9838001 4.3969737 1.28190071 0.01802595 E43 0.4955380 2.8185273 0.82331661 0.00793485 E44 0.4234418 5.9270472 0.44183940 0.24959295 E45 1.5173952 0.8510214 1.95118882 0.84886650 E48 2.3197861 1.9469865 7.44564809 5.90044110 E56 0.5108719 0.0847401 1.09609707 1.82499015 E58 0.4880990 2.1264312 1.36506017 0.11759265 H04 2.5008506 27.4835352 13.14400663 0.03507165 H06 0.2841785 2.0398764 1.46660757 0.01427955 H07 1.4500404 10.9416210 3.39146197 0.01941135 H08 0.5011987 0.2131668 0.57356153 0.45570180 H09 1.2653958 10.8166410 7.00507483 0.15877860 H10 0.7942211 1.3782558 4.03545973 0.11882340 H12 2.5813911 8.4009948 4.51254046 0.84020835 H15 0.1917405 1.5658842 0.74185414 0.00826125 H16 2.1486462 4.0113864 9.56424671 3.69521370 H19 0.5557962 4.2411288 2.50314959 0.02286150 H20 0.9677842 4.3890999 3.78083553 0.07778835 H23 0.9420728 3.9595926 1.30102424 0.29551170 H25 1.0738812 7.7087100 3.42255644 0.68422815 H30 0.4902154 1.3423326 0.75352358 2.29694205 H31 1.8416387 9.7206468 4.43631049 0.48033270 H32 0.5427161 5.8415880 1.38975295 0.06290070 H34 1.3188004 12.4245048 5.12752821 0.02616405 H37 2.5737627 27.8754720 9.15837446 0.25084785 H39 0.2938515 2.4124689 0.75581958 0.02116935 H40 1.1315544 3.8592006 5.83728129 0.42791340 H43 0.7161526 6.3701718 2.50320009 0.03324300 H45 0.9215094 1.5407343 3.94772969 0.81685470 H47 0.9581476 5.6254728 2.15816743 0.32372385 P01 0.5733407 1.8086574 1.33450269 0.76149270 P05 1.1668645 9.3271338 0.63288528 0.36958890 P09 0.7574713 7.1642826 0.52521364 0.04058895 P14 0.5034011 3.8678286 0.03866504 0.64239540 P20 0.7666679 2.0253963 0.68358450 0.54081750 P25 0.2950900 4.5486294 0.50927300 0.38403045 P28 4.4616492 30.8235540 17.16905293 1.83789930 P33 3.3222731 33.2508960 7.86558092 0.43485525 P34 0.3459813 0.8618043 1.84351514 0.01439085 P36 1.2281449 10.5844332 0.28646419 0.71007735 P41 1.6479428 25.4247288 3.56446783 1.35787020 P43 3.4204299 3.2932512 7.78711290 13.30940625 P45 1.6790221 2.9649723 5.42286382 0.12008145 P47 0.4775963 2.8718187 1.06401988 0.80290395 P48 3.0192702 0.9945204 17.82268997 6.15753405 P49 0.8859881 15.7503030 0.32349316 0.16673670 P51 1.8101944 8.2580928 3.46629537 2.64862665 P53 1.5688483 24.5797020 2.14349384 0.12960855 P56 0.9749002 12.3956724 0.19719518 1.01352285 P58 0.7963638 6.4119048 1.11305236 0.07796910 P60 2.3930517 33.2359848 8.57518064 0.20491080 P64 0.2656280 0.3023889 1.17634560 0.47208750 P65 0.4114934 0.2113239 0.89754587 1.90757895 P67 1.7026024 17.3557032 0.62786285 2.02223145 P69 0.4073834 1.8827937 1.76632754 0.23484960 P72 0.2702016 3.9134910 0.57524887 0.20525790 P75 1.4392490 2.6274414 6.26632261 1.62440925 P78 0.9165986 2.0786076 1.22668730 0.48372150 P79 1.7376207 12.1993284 7.73575004 1.52807535 sequence_fractions %&gt;% pivot_longer(!sample, names_to = &quot;fraction&quot;, values_to = &quot;value&quot;) %&gt;% mutate(value = value / 1000000000) %&gt;% mutate(fraction = factor(fraction, levels = c(&quot;lowqual_bases&quot;,&quot;host_bases&quot;,&quot;unmapped_bases&quot;,&quot;mags_bases&quot;))) %&gt;% ggplot(., aes(x = sample, y = value, fill=fraction)) + geom_bar(position=&quot;stack&quot;, stat = &quot;identity&quot;) + scale_fill_manual(name=&quot;Sequence type&quot;, breaks=c(&quot;lowqual_bases&quot;,&quot;host_bases&quot;,&quot;unmapped_bases&quot;,&quot;mags_bases&quot;), labels=c(&quot;Low quality&quot;,&quot;Mapped to host&quot;,&quot;Unmapped&quot;,&quot;Mapped to MAGs&quot;), values=c(&quot;#CCCCCC&quot;, &quot;#bcdee1&quot;, &quot;#d8b8a3&quot;,&quot;#93655c&quot;))+ labs(x = &quot;Samples&quot;, y = &quot;Amount of data (GB)&quot;) + theme_classic() + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1, size=6),legend.position = &quot;bottom&quot;) tinytable_r3zu7pizqpu8wff68sfn .table td.tinytable_css_0cqu9pd7v309a7fabhw3, .table th.tinytable_css_0cqu9pd7v309a7fabhw3 { border-bottom: solid 0.1em #d3d8dc; } species mean_host_perc sd_host_perc max_host_perc min_host_perc Eb 24.0105851 26.0487087 77.523636 0.39599794 Ha 36.4671066 15.3892853 58.926064 6.53771139 Pk 56.5200310 29.2493571 92.136483 1.81265533 NA 0.5625856 0.4379119 1.079399 0.02651141 "],["mag-catalogue.html", "Chapter 5 MAG catalogue 5.1 Genome phylogeny 5.2 Genome quality 5.3 Functional overview 5.4 Functional ordination", " Chapter 5 MAG catalogue load(&quot;data/data.Rdata&quot;) 5.1 Genome phylogeny # Generate the phylum color heatmap phylum_heatmap &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% arrange(match(genome, genome_tree$tip.label)) %&gt;% select(genome,phylum) %&gt;% mutate(phylum = factor(phylum, levels = unique(phylum))) %&gt;% column_to_rownames(var = &quot;genome&quot;) # Generate basal tree circular_tree &lt;- force.ultrametric(genome_tree, method=&quot;extend&quot;) %&gt;% # extend to ultrametric for the sake of visualisation ggtree(., layout=&quot;fan&quot;, open.angle=10, size=0.5) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** # Add phylum ring circular_tree &lt;- gheatmap(circular_tree, phylum_heatmap, offset=0.55, width=0.1, colnames=FALSE) + scale_fill_manual(values=phylum_colors) + geom_tiplab2(size=1, hjust=-0.1) + theme(legend.position = &quot;none&quot;, plot.margin = margin(0, 0, 0, 0), panel.margin = margin(0, 0, 0, 0)) # Flush color scale to enable a new color scheme in the next ring circular_tree &lt;- circular_tree + new_scale_fill() # Add completeness ring circular_tree &lt;- circular_tree + new_scale_fill() + scale_fill_gradient(low = &quot;#d1f4ba&quot;, high = &quot;#f4baba&quot;) + geom_fruit( data=genome_metadata, geom=geom_bar, mapping = aes(x=completeness, y=genome, fill=contamination), offset = 0.55, orientation=&quot;y&quot;, stat=&quot;identity&quot;) # Add genome-size ring circular_tree &lt;- circular_tree + new_scale_fill() + scale_fill_manual(values = &quot;#cccccc&quot;) + geom_fruit( data=genome_metadata, geom=geom_bar, mapping = aes(x=length, y=genome), offset = 0.05, orientation=&quot;y&quot;, stat=&quot;identity&quot;) # Add text circular_tree &lt;- circular_tree + annotate(&#39;text&#39;, x=2.7, y=0, label=&#39; Phylum&#39;, family=&#39;arial&#39;, size=3.5) + annotate(&#39;text&#39;, x=3.1, y=0, label=&#39; Genome quality&#39;, family=&#39;arial&#39;, size=3.5) + annotate(&#39;text&#39;, x=3.5, y=0, label=&#39; Genome size&#39;, family=&#39;arial&#39;, size=3.5) #Plot circular tree circular_tree %&gt;% open_tree(30) %&gt;% rotate_tree(90) 5.2 Genome quality genome_metadata %&gt;% summarise(completeness_mean=mean(completeness) %&gt;% round(2) %&gt;% as.character(), completeness_sd=sd(completeness) %&gt;% round(2) %&gt;% as.character(), contamination_mean=mean(contamination) %&gt;% round(2), contamination_sd=sd(contamination) %&gt;% round(2)) %&gt;% unite(&quot;Completeness&quot;,completeness_mean, completeness_sd, sep = &quot; ± &quot;, remove = TRUE) %&gt;% unite(&quot;Contamination&quot;,contamination_mean, contamination_sd, sep = &quot; ± &quot;, remove = TRUE) %&gt;% tt() tinytable_pmtzi5pjmpfh95u9wcpu .table td.tinytable_css_b9t9mue18dflewknsfpj, .table th.tinytable_css_b9t9mue18dflewknsfpj { border-bottom: solid 0.1em #d3d8dc; } Completeness Contamination 91.63 ± 8.33 1.89 ± 1.84 #Generate quality biplot genome_biplot &lt;- genome_metadata %&gt;% select(c(genome,domain,phylum,completeness,contamination,length)) %&gt;% arrange(match(genome, rev(genome_tree$tip.label))) %&gt;% #sort MAGs according to phylogenetic tree ggplot(aes(x=completeness,y=contamination,size=length,color=phylum)) + geom_point(alpha=0.7) + ylim(c(10,0)) + scale_color_manual(values=phylum_colors) + labs(y= &quot;Contamination&quot;, x = &quot;Completeness&quot;) + theme_classic() + theme(legend.position = &quot;none&quot;) #Generate contamination boxplot genome_contamination &lt;- genome_metadata %&gt;% ggplot(aes(y=contamination)) + ylim(c(10,0)) + geom_boxplot(colour = &quot;#999999&quot;, fill=&quot;#cccccc&quot;) + theme_void() + theme(legend.position = &quot;none&quot;, axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank(), plot.margin = unit(c(0, 0, 0.40, 0),&quot;inches&quot;)) #add bottom-margin (top, right, bottom, left) #Generate completeness boxplot genome_completeness &lt;- genome_metadata %&gt;% ggplot(aes(x=completeness)) + xlim(c(50,100)) + geom_boxplot(colour = &quot;#999999&quot;, fill=&quot;#cccccc&quot;) + theme_void() + theme(legend.position = &quot;none&quot;, axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank(), plot.margin = unit(c(0, 0, 0, 0.50),&quot;inches&quot;)) #add left-margin (top, right, bottom, left) #Render composite figure grid.arrange(grobs = list(genome_completeness,genome_biplot,genome_contamination), layout_matrix = rbind(c(1,1,1,1,1,1,1,1,1,1,1,4), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3))) 5.3 Functional overview # Aggregate basal GIFT into elements function_table &lt;- genome_gifts %&gt;% to.elements(., GIFT_db) # Generate basal tree function_tree &lt;- force.ultrametric(genome_tree, method=&quot;extend&quot;) %&gt;% ggtree(., size = 0.3) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** #Add phylum colors next to the tree tips function_tree &lt;- gheatmap(function_tree, phylum_heatmap, offset=0, width=0.1, colnames=FALSE) + scale_fill_manual(values=phylum_colors) + labs(fill=&quot;Phylum&quot;) #Reset fill scale to use a different colour profile in the heatmap function_tree &lt;- function_tree + new_scale_fill() #Add functions heatmap function_tree &lt;- gheatmap(function_tree, function_table, offset=0.5, width=3.5, colnames=FALSE) + vexpand(.08) + coord_cartesian(clip = &quot;off&quot;) + scale_fill_gradient(low = &quot;#f4f4f4&quot;, high = &quot;steelblue&quot;, na.value=&quot;white&quot;) + labs(fill=&quot;GIFT&quot;) #Reset fill scale to use a different colour profile in the heatmap function_tree &lt;- function_tree + new_scale_fill() # Add completeness barplots function_tree &lt;- function_tree + geom_fruit(data=genome_metadata, geom=geom_bar, grid.params=list(axis=&quot;x&quot;, text.size=2, nbreak = 1), axis.params=list(vline=TRUE), mapping = aes(x=length, y=genome, fill=completeness), offset = 3.8, orientation=&quot;y&quot;, stat=&quot;identity&quot;) + scale_fill_gradient(low = &quot;#cf8888&quot;, high = &quot;#a2cc87&quot;) + labs(fill=&quot;Genome\\ncompleteness&quot;) function_tree 5.4 Functional ordination # Generate the tSNE ordination tSNE_function &lt;- Rtsne(X=function_table, dims = 2, check_duplicates = FALSE) # Plot the ordination function_ordination &lt;- tSNE_function$Y %&gt;% as.data.frame() %&gt;% mutate(genome=rownames(function_table)) %&gt;% inner_join(genome_metadata, by=&quot;genome&quot;) %&gt;% rename(tSNE1=&quot;V1&quot;, tSNE2=&quot;V2&quot;) %&gt;% select(genome,phylum,tSNE1,tSNE2, length) %&gt;% ggplot(aes(x = tSNE1, y = tSNE2, color = phylum, size=length))+ geom_point(shape=16, alpha=0.7) + scale_color_manual(values=phylum_colors) + theme_minimal() + labs(color=&quot;Phylum&quot;, size=&quot;Genome size&quot;) + guides(color = guide_legend(override.aes = list(size = 5))) # enlarge Phylum dots in legend function_ordination "],["taxonomic-composition.html", "Chapter 6 Taxonomic composition 6.1 Taxonomy boxplot", " Chapter 6 Taxonomic composition load(&quot;data/data.Rdata&quot;) 6.0.1 Taxonomy barplot per individual genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS nornalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% #reduce to minimum number of columns left_join(., genome_metadata, by = join_by(genome == genome)) %&gt;% #append genome metadata left_join(., sample_metadata, by = join_by(sample == sample)) %&gt;% #append sample metadata filter(!is.na(count)) %&gt;% ggplot(aes(y=count,x=sample, fill=phylum, group=phylum)) + #grouping enables keeping the same sorting of taxonomic units geom_bar(stat=&quot;identity&quot;, colour=&quot;white&quot;, linewidth=0.1) + #plot stacked bars with white borders scale_fill_manual(values=phylum_colors) + labs(x = &quot;Relative abundance&quot;, y =&quot;Samples&quot;) + facet_nested(. ~ species.y, scales=&quot;free&quot;, space=&quot;free&quot;) + #facet per day and treatment scale_y_continuous(expand = c(0.001, 0.001)) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), axis.title.x = element_blank(), panel.background = element_blank(), panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(linewidth = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), legend.position = &quot;none&quot;, strip.background.x=element_rect(color = NA, fill= &quot;#f4f4f4&quot;)) 6.1 Taxonomy boxplot 6.1.1 Family family_summary &lt;- genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS nornalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% #reduce to minimum number of columns left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% #append sample metadata left_join(., genome_metadata, by = join_by(genome == genome)) %&gt;% #append genome metadata group_by(sample,family) %&gt;% summarise(relabun=sum(count)) family_summary %&gt;% filter(!is.na(relabun)) %&gt;% group_by(family) %&gt;% summarise(mean=mean(relabun),sd=sd(relabun)) %&gt;% mutate(family= sub(&quot;^f__&quot;, &quot;&quot;, family)) %&gt;% arrange(-mean) %&gt;% tt() tinytable_rqtcit29pj7hhevf6vhw .table td.tinytable_css_h899283jl1o8l12vc83t, .table th.tinytable_css_h899283jl1o8l12vc83t { border-bottom: solid 0.1em #d3d8dc; } family mean sd Diplorickettsiaceae 2.187447e-01 0.3775449596 Enterobacteriaceae 2.043302e-01 0.3085713301 Rickettsiaceae 7.664261e-02 0.2358603091 Vibrionaceae 7.584574e-02 0.2134671175 Mycoplasmoidaceae 3.434938e-02 0.1578998113 Chromatiaceae 3.013017e-02 0.1628099375 Enterococcaceae 2.972145e-02 0.0981694905 Mycoplasmataceae 2.666150e-02 0.1097903779 Desulfovibrionaceae 2.545876e-02 0.0700689189 Pasteurellaceae 2.407329e-02 0.0941479537 Dysgonomonadaceae 2.340961e-02 0.0623367378 Aeromonadaceae 2.189499e-02 0.0810341257 Burkholderiaceae 2.116559e-02 0.1201598495 Weeksellaceae 2.043326e-02 0.1289537303 Helicobacteraceae 1.800196e-02 0.1048239605 Lachnospiraceae 1.652456e-02 0.0952189577 Tannerellaceae 1.489720e-02 0.0522454487 Metamycoplasmataceae 1.373413e-02 0.1110239783 Anaplasmataceae 1.299970e-02 0.0809703424 Adiutricaceae 1.193704e-02 0.0330387602 Acetobacteraceae 1.020193e-02 0.0838105488 Leptotrichiaceae 7.366792e-03 0.0204611232 Rhizobiaceae 7.284583e-03 0.0319873373 UBA932 6.301182e-03 0.0222733794 Synergistaceae 5.899210e-03 0.0193212807 Bacteroidaceae 5.140353e-03 0.0316284890 Streptococcaceae 4.935718e-03 0.0256749902 Fusobacteriaceae 4.106633e-03 0.0286630662 Neisseriaceae 3.867777e-03 0.0232811117 Burkholderiaceae_B 2.627864e-03 0.0075890108 Oscillospiraceae 2.199264e-03 0.0101366940 Erysipelotrichaceae 2.078302e-03 0.0087476354 1.961636e-03 0.0054529528 SZUA-567 1.830474e-03 0.0079642378 Gemellaceae 1.671244e-03 0.0092294463 Rhodocyclaceae 1.476245e-03 0.0098426966 Halomonadaceae 1.412671e-03 0.0116491815 Microcoleaceae 1.386905e-03 0.0080727822 Acutalibacteraceae 1.342219e-03 0.0042110585 Ruminococcaceae 1.199558e-03 0.0051632918 Elusimicrobiaceae 1.016033e-03 0.0062337729 Christensenellaceae 7.759882e-04 0.0056612772 Micrococcaceae 6.208396e-04 0.0051195742 Mucispirillaceae 5.268765e-04 0.0030614924 Rikenellaceae 3.106207e-04 0.0015928577 WRBN01 2.743079e-04 0.0022620009 Beijerinckiaceae 2.538523e-04 0.0014688584 Anaerotignaceae 2.433059e-04 0.0011030350 Clostridiaceae 1.746377e-04 0.0014400995 Endomicrobiaceae 1.502766e-04 0.0009136723 Cyanobiaceae 1.284750e-04 0.0008308923 Campylobacteraceae 9.328138e-05 0.0004041964 CAG-508 6.856741e-05 0.0005654213 UBA660 5.933265e-05 0.0004441272 CAG-239 5.722052e-05 0.0004718525 family_arrange &lt;- family_summary %&gt;% filter(!is.na(relabun)) %&gt;% group_by(family) %&gt;% summarise(mean=sum(relabun)) %&gt;% arrange(-mean) %&gt;% select(family) %&gt;% mutate(family= sub(&quot;^f__&quot;, &quot;&quot;, family)) %&gt;% pull() family_summary %&gt;% left_join(genome_metadata %&gt;% select(family,phylum) %&gt;% unique(),by=join_by(family==family)) %&gt;% left_join(sample_metadata,by=join_by(sample==sample)) %&gt;% mutate(family= sub(&quot;^f__&quot;, &quot;&quot;, family)) %&gt;% filter(family %in% family_arrange[1:20]) %&gt;% mutate(family=factor(family,levels=rev(family_arrange[1:20]))) %&gt;% filter(relabun &gt; 0) %&gt;% ggplot(aes(x=relabun, y=family, group=family, color=phylum, fill=phylum)) + scale_color_manual(values=phylum_colors[-8]) + scale_fill_manual(values=phylum_colors[-8]) + geom_boxplot(alpha=0.2) + geom_jitter(alpha=0.5) + facet_nested(. ~ species)+ theme_minimal() + theme(legend.position = &quot;none&quot;) 6.1.2 Genus genus_summary &lt;- genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS nornalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% #reduce to minimum number of columns left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% #append sample metadata left_join(genome_metadata, by = join_by(genome == genome)) %&gt;% #append genome metadata group_by(sample,genus) %&gt;% summarise(relabun=sum(count)) %&gt;% filter(genus != &quot;g__&quot;) genus_summary %&gt;% filter(!is.na(relabun)) %&gt;% group_by(genus) %&gt;% summarise(mean=mean(relabun),sd=sd(relabun)) %&gt;% arrange(-mean) %&gt;% tt() tinytable_wcq6cdl765utj0ilnhqu .table td.tinytable_css_57hflxbmoq9y1cw65o14, .table th.tinytable_css_57hflxbmoq9y1cw65o14 { border-bottom: solid 0.1em #d3d8dc; } genus mean sd g__Aquirickettsiella 0.2187446907 0.3775449596 g__Rickettsia 0.0766426103 0.2358603091 g__Vibrio 0.0612854767 0.1815583104 g__Serratia 0.0392792466 0.1515040816 g__Malacoplasma 0.0343493848 0.1578998113 g__Jejubacter 0.0297085906 0.1353469180 g__Klebsiella 0.0281621554 0.1401737911 g__Proteus 0.0262714617 0.1208827065 g__Dysgonomonas 0.0234096130 0.0623367378 g__Aeromonas 0.0218949940 0.0810341257 g__Enterococcus 0.0205450510 0.0613237584 g__Apibacter 0.0204332607 0.1289537303 g__Arsenophonus 0.0202206308 0.1163750104 g__Citrobacter_A 0.0163795294 0.0715082575 g__Photobacterium 0.0145602666 0.1200670343 g__Spiroplasma 0.0142582045 0.0600647100 g__Aggregatibacter 0.0141649131 0.0760118995 g__UBA710 0.0137341310 0.1110239783 g__Morganella 0.0135742919 0.0616109693 g__Tannerella 0.0132714881 0.0492593531 g__Edwardiiplasma 0.0124032953 0.0931253020 g__Adiutrix 0.0119370413 0.0330387602 g__NHYM01 0.0116409494 0.0959937280 g__FLUQ01 0.0115118617 0.0352516515 g__CHH4-2 0.0114352338 0.0933611759 g__Pasteurella 0.0099083738 0.0580596282 g__Providencia 0.0098782782 0.0715394982 g__Mesenet 0.0089807831 0.0740574344 g__Sebaldella 0.0073667925 0.0204611232 g__WRHT01 0.0071049905 0.0204642817 g__Frigididesulfovibrio 0.0068419096 0.0182547890 g__Pseudocitrobacter 0.0065704648 0.0497576595 g__Enterococcus_B 0.0065649962 0.0310989636 g__Paraburkholderia 0.0060718354 0.0403937181 g__Escherichia 0.0056522274 0.0331015245 g__Helicobacter_G 0.0053068071 0.0437610522 g__Lactococcus 0.0049357182 0.0256749902 g__Bacteroides 0.0044265211 0.0269972305 g__Wolbachia 0.0040189218 0.0150594226 g__Neisseria 0.0038677775 0.0232811117 g__Fusobacterium_C 0.0034705459 0.0286188543 g__Caballeronia 0.0029784880 0.0245612414 g__Orbus 0.0029363380 0.0242136637 g__Saezia 0.0026278637 0.0075890108 g__Enterococcus_D 0.0026114049 0.0137447440 g__CALYQQ01 0.0025590252 0.0144712680 g__Enterobacillus 0.0025407734 0.0114120444 g__Breznakia 0.0020783024 0.0087476354 g__JAJBSZ01 0.0018304744 0.0079642378 g__DFXE01 0.0016257132 0.0134059746 g__WQUU01 0.0016089520 0.0077269551 g__Trinickia 0.0015905648 0.0092067348 g__Zymobacter 0.0014126708 0.0116491815 g__Planktothrix 0.0013869050 0.0080727822 g__Scatolibacter 0.0013422188 0.0042110585 g__Helicobacter_C 0.0010542016 0.0044609239 g__UBA1174 0.0007960050 0.0044995588 g__WRAV01 0.0007911353 0.0049249713 g__QANA01 0.0007759882 0.0056612772 g__UBA1794 0.0007138316 0.0051570073 g__Fusobacterium_A 0.0006360873 0.0026483167 g__Acaricomes 0.0006208396 0.0051195742 g__GCA-022846635 0.0005971599 0.0038300319 g__JAAYCI01 0.0004084223 0.0017493200 g__Tokpelaia_A 0.0003877471 0.0031974447 g__JAJQAW01 0.0003106207 0.0015928577 g__JAHHUI01 0.0002743079 0.0022620009 g__JAHZDZ01 0.0002433059 0.0011030350 g__Elusimicrobium 0.0002200281 0.0018143980 g__Sarcina 0.0001746377 0.0014400995 g__Endomicrobium 0.0001502766 0.0009136723 g__Vulcanococcus 0.0001284750 0.0008308923 g__Lawsonibacter 0.0001278011 0.0007094993 g__Entomobacter 0.0000378602 0.0001692784 genus_arrange &lt;- genus_summary %&gt;% group_by(genus) %&gt;% summarise(mean=sum(relabun)) %&gt;% filter(genus != &quot;g__&quot;)%&gt;% arrange(-mean) %&gt;% select(genus) %&gt;% mutate(genus= sub(&quot;^g__&quot;, &quot;&quot;, genus)) %&gt;% pull() genus_summary %&gt;% left_join(genome_metadata %&gt;% select(genus,phylum) %&gt;% unique(),by=join_by(genus==genus)) %&gt;% left_join(sample_metadata,by=join_by(sample==sample)) %&gt;% mutate(genus= sub(&quot;^g__&quot;, &quot;&quot;, genus)) %&gt;% filter(genus %in% genus_arrange[1:20]) %&gt;% mutate(genus=factor(genus,levels=rev(genus_arrange[1:20]))) %&gt;% filter(relabun &gt; 0) %&gt;% ggplot(aes(x=relabun, y=genus, group=genus, color=phylum)) + scale_color_manual(values=phylum_colors) + #geom_boxplot() + geom_jitter(alpha=0.5) + facet_nested(. ~ species)+ theme_minimal() "],["diversity.html", "Chapter 7 Diversity 7.1 Alpha diversity 7.2 Beta diversity", " Chapter 7 Diversity load(&quot;data/data.Rdata&quot;) 7.1 Alpha diversity # Calculate Hill numbers richness &lt;- genome_counts_filt %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 0) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(richness = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) neutral &lt;- genome_counts_filt %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 1) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(neutral = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) phylogenetic &lt;- genome_counts_filt %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 1, tree = genome_tree) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(phylogenetic = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) # Aggregate basal GIFT into elements dist &lt;- genome_gifts %&gt;% to.elements(., GIFT_db) %&gt;% traits2dist(., method = &quot;gower&quot;) functional &lt;- genome_counts_filt %&gt;% filter(genome %in% labels(dist)[[1]]) %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 1, dist = dist) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(functional = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) %&gt;% mutate(functional = if_else(is.nan(functional), 1, functional)) # Merge all metrics alpha_div &lt;- richness %&gt;% full_join(neutral, by = join_by(sample == sample)) %&gt;% full_join(phylogenetic, by = join_by(sample == sample)) %&gt;% full_join(functional, by = join_by(sample == sample)) alpha_div %&gt;% pivot_longer(-sample, names_to = &quot;metric&quot;, values_to = &quot;value&quot;) %&gt;% left_join(., sample_metadata, by = join_by(sample == sample)) %&gt;% mutate(metric=factor(metric,levels=c(&quot;richness&quot;,&quot;neutral&quot;,&quot;phylogenetic&quot;,&quot;functional&quot;))) %&gt;% ggplot(aes(y = value, x = species, group=species, color=species, fill=species)) + geom_boxplot(outlier.shape = NA) + geom_jitter(alpha=0.5) + scale_color_manual(name=&quot;Species&quot;, breaks=c(&quot;Pk&quot;,&quot;Eb&quot;,&quot;Ha&quot;), labels=c(&quot;Pipistrellus kuhlii&quot;,&quot;Eptesicus bottaew&quot;,&quot;Hipsugo ariel&quot;), values=c(&quot;#e5bd5b&quot;, &quot;#6b7398&quot;,&quot;#e2815a&quot;)) + scale_fill_manual(name=&quot;Species&quot;, breaks=c(&quot;Pk&quot;,&quot;Eb&quot;,&quot;Ha&quot;), labels=c(&quot;Pipistrellus kuhlii&quot;,&quot;Eptesicus bottaew&quot;,&quot;Hipsugo ariel&quot;), values=c(&quot;#e5bd5b50&quot;, &quot;#6b739850&quot;,&quot;#e2815a50&quot;)) + facet_wrap(. ~ metric, scales = &quot;free&quot;, ncol=4) + coord_cartesian(xlim = c(1, NA)) + theme_classic() + theme( strip.background = element_blank(), panel.grid.minor.x = element_line(size = .1, color = &quot;grey&quot;), axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x = element_blank()) 7.2 Beta diversity beta_q0n &lt;- genome_counts %&gt;% select(where(~!all(. == 0))) %&gt;% # remove empty samples column_to_rownames(., &quot;genome&quot;) %&gt;% hillpair(., q = 0) beta_q1n &lt;- genome_counts %&gt;% select(where(~!all(. == 0))) %&gt;% # remove empty samples column_to_rownames(., &quot;genome&quot;) %&gt;% hillpair(., q = 1) beta_q1p &lt;- genome_counts %&gt;% select(where(~!all(. == 0))) %&gt;% # remove empty samples column_to_rownames(., &quot;genome&quot;) %&gt;% hillpair(., q = 1, tree = genome_tree) beta_q1f &lt;- genome_counts %&gt;% select(where(~!all(. == 0))) %&gt;% # remove empty samples filter(genome %in% labels(dist)[[1]]) %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% hillpair(., q = 1, dist = dist) 7.2.1 Richness (q0n) tinytable_5x9jjr762wsc044wvwhz .table td.tinytable_css_7wko3w0j8x6hm8stjofq, .table th.tinytable_css_7wko3w0j8x6hm8stjofq { border-bottom: solid 0.1em #d3d8dc; } Homogeneity of variances Df Sum Sq Mean Sq F N.Perm Pr(&gt;F) 2 0.0005478071 0.0002739036 0.3643863 999 0.695 69 0.0518662354 0.0007516846 NA NA NA tinytable_bsqz9umml87do4s6lx1h .table td.tinytable_css_s83xbhncra82faws0f6g, .table th.tinytable_css_s83xbhncra82faws0f6g { border-bottom: solid 0.1em #d3d8dc; } Permanova term df SumOfSqs R2 statistic p.value species 2 0.004372878 0.03552136 1.270621 0.239 Residual 69 0.118732719 0.96447864 NA NA Total 71 0.123105597 1.00000000 NA NA beta_q0n$C %&gt;% vegan::metaMDS(., trymax = 500, k = 2, trace = 0) %&gt;% vegan::scores() %&gt;% as_tibble(., rownames = &quot;sample&quot;) %&gt;% dplyr::left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% group_by(species) %&gt;% mutate(x_cen = mean(NMDS1, na.rm = TRUE)) %&gt;% mutate(y_cen = mean(NMDS2, na.rm = TRUE)) %&gt;% ungroup() %&gt;% ggplot(aes(x = NMDS1, y = NMDS2, color = species)) + scale_color_manual(values = c(&quot;#e5bd5b&quot;, &quot;#6b7398&quot;,&quot;#e2815a&quot;)) + scale_shape_manual(values = 1:10) + geom_point(size = 4) + # stat_ellipse(aes(color = beta_q1n_nmds$Groups))+ geom_segment(aes(x = x_cen, y = y_cen, xend = NMDS1, yend = NMDS2), alpha = 0.9) + theme_classic() + theme( axis.text.x = element_text(size = 12), axis.text.y = element_text(size = 12), axis.title = element_text(size = 20, face = &quot;bold&quot;), axis.text = element_text(face = &quot;bold&quot;, size = 18), panel.background = element_blank(), axis.line = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), legend.text = element_text(size = 16), legend.title = element_text(size = 18), legend.position = &quot;right&quot;, legend.box = &quot;vertical&quot; ) 7.2.2 Neutral (q1n) tinytable_bvme5sif0eno4uqxxsa5 .table td.tinytable_css_fngg14wf3p9y7pl17vp9, .table th.tinytable_css_fngg14wf3p9y7pl17vp9 { border-bottom: solid 0.1em #d3d8dc; } Homogeneity of variances Df Sum Sq Mean Sq F N.Perm Pr(&gt;F) 2 0.2034005 0.10170027 7.084138 999 0.003 69 0.9905677 0.01435605 NA NA NA tinytable_0dea5y7c62g6d80b4t8a .table td.tinytable_css_aodrpioqthmtgb8wayer, .table th.tinytable_css_aodrpioqthmtgb8wayer { border-bottom: solid 0.1em #d3d8dc; } Permanova term df SumOfSqs R2 statistic p.value species 2 1.567475 0.06477038 2.389336 0.003 Residual 69 22.633010 0.93522962 NA NA Total 71 24.200485 1.00000000 NA NA beta_q1n$C %&gt;% vegan::metaMDS(., trymax = 500, k = 2, trace = 0) %&gt;% vegan::scores() %&gt;% as_tibble(., rownames = &quot;sample&quot;) %&gt;% dplyr::left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% group_by(species) %&gt;% mutate(x_cen = mean(NMDS1, na.rm = TRUE)) %&gt;% mutate(y_cen = mean(NMDS2, na.rm = TRUE)) %&gt;% ungroup() %&gt;% ggplot(aes(x = NMDS1, y = NMDS2, color = species)) + scale_color_manual(values = c(&quot;#e5bd5b&quot;, &quot;#6b7398&quot;,&quot;#e2815a&quot;)) + scale_shape_manual(values = 1:10) + geom_point(size = 4) + # stat_ellipse(aes(color = beta_q1n_nmds$Groups))+ geom_segment(aes(x = x_cen, y = y_cen, xend = NMDS1, yend = NMDS2), alpha = 0.9) + theme_classic() + theme( axis.text.x = element_text(size = 12), axis.text.y = element_text(size = 12), axis.title = element_text(size = 20, face = &quot;bold&quot;), axis.text = element_text(face = &quot;bold&quot;, size = 18), panel.background = element_blank(), axis.line = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), legend.text = element_text(size = 16), legend.title = element_text(size = 18), legend.position = &quot;right&quot;, legend.box = &quot;vertical&quot; ) 7.2.3 Phylogenetic (q1p) tinytable_7dqt55d6chl9khxvsvnl .table td.tinytable_css_9yfhtyzthu9oyewkjusq, .table th.tinytable_css_9yfhtyzthu9oyewkjusq { border-bottom: solid 0.1em #d3d8dc; } Homogeneity of variances Df Sum Sq Mean Sq F N.Perm Pr(&gt;F) 2 0.135256 0.06762802 3.065569 999 0.057 69 1.522175 0.02206051 NA NA NA tinytable_8w678d19vg046w0zbgus .table td.tinytable_css_ig8phjd8342m6fmg59v4, .table th.tinytable_css_ig8phjd8342m6fmg59v4 { border-bottom: solid 0.1em #d3d8dc; } Permanova term df SumOfSqs R2 statistic p.value species 2 0.4397545 0.04243533 1.528898 0.139 Residual 69 9.9231780 0.95756467 NA NA Total 71 10.3629324 1.00000000 NA NA beta_q1p$C %&gt;% vegan::metaMDS(., trymax = 500, k = 2, trace = 0) %&gt;% vegan::scores() %&gt;% as_tibble(., rownames = &quot;sample&quot;) %&gt;% dplyr::left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% group_by(species) %&gt;% mutate(x_cen = mean(NMDS1, na.rm = TRUE)) %&gt;% mutate(y_cen = mean(NMDS2, na.rm = TRUE)) %&gt;% ungroup() %&gt;% ggplot(aes(x = NMDS1, y = NMDS2, color = species)) + scale_color_manual(values = c(&quot;#e5bd5b&quot;, &quot;#6b7398&quot;,&quot;#e2815a&quot;)) + scale_shape_manual(values = 1:10) + geom_point(size = 4) + # stat_ellipse(aes(color = beta_q1n_nmds$Groups))+ geom_segment(aes(x = x_cen, y = y_cen, xend = NMDS1, yend = NMDS2), alpha = 0.9) + theme_classic() + theme( axis.text.x = element_text(size = 12), axis.text.y = element_text(size = 12), axis.title = element_text(size = 20, face = &quot;bold&quot;), axis.text = element_text(face = &quot;bold&quot;, size = 18), panel.background = element_blank(), axis.line = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), legend.text = element_text(size = 16), legend.title = element_text(size = 18), legend.position = &quot;right&quot;, legend.box = &quot;vertical&quot; ) 7.2.4 Functional (q1f) tinytable_ffv2i50npvtyircyt56o .table td.tinytable_css_plbpvopk80ne4980z1qt, .table th.tinytable_css_plbpvopk80ne4980z1qt { border-bottom: solid 0.1em #d3d8dc; } Homogeneity of variances Df Sum Sq Mean Sq F N.Perm Pr(&gt;F) 2 0.2176262 0.10881312 2.510851 999 0.098 69 2.9902627 0.04333714 NA NA NA tinytable_qd2geuz0c8si0pd1rvkp .table td.tinytable_css_msmfhyyqhffhnzug7eb3, .table th.tinytable_css_msmfhyyqhffhnzug7eb3 { border-bottom: solid 0.1em #d3d8dc; } Permanova term df SumOfSqs R2 statistic p.value species 2 0.9379128 0.0763021 2.849874 0.044 Residual 69 11.3541841 0.9236979 NA NA Total 71 12.2920969 1.0000000 NA NA beta_q1f$C %&gt;% vegan::metaMDS(., trymax = 500, k = 2, trace = 0) %&gt;% vegan::scores() %&gt;% as_tibble(., rownames = &quot;sample&quot;) %&gt;% dplyr::left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% group_by(species) %&gt;% mutate(x_cen = mean(NMDS1, na.rm = TRUE)) %&gt;% mutate(y_cen = mean(NMDS2, na.rm = TRUE)) %&gt;% ungroup() %&gt;% ggplot(aes(x = NMDS1, y = NMDS2, color = species)) + scale_color_manual(values = c(&quot;#e5bd5b&quot;, &quot;#6b7398&quot;,&quot;#e2815a&quot;)) + scale_shape_manual(values = 1:10) + geom_point(size = 4) + # stat_ellipse(aes(color = beta_q1n_nmds$Groups))+ geom_segment(aes(x = x_cen, y = y_cen, xend = NMDS1, yend = NMDS2), alpha = 0.9) + theme_classic() + theme( axis.text.x = element_text(size = 12), axis.text.y = element_text(size = 12), axis.title = element_text(size = 20, face = &quot;bold&quot;), axis.text = element_text(face = &quot;bold&quot;, size = 18), panel.background = element_blank(), axis.line = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), legend.text = element_text(size = 16), legend.title = element_text(size = 18), legend.position = &quot;right&quot;, legend.box = &quot;vertical&quot; ) "],["functions.html", "Chapter 8 Functions", " Chapter 8 Functions load(&quot;data/data.Rdata&quot;) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
