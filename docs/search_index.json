[["index.html", "AlberdiLab | Aizpurua et al. in prep Desert bats metagenomics Chapter 1 Introduction 1.1 Prepare the R environment", " AlberdiLab | Aizpurua et al. in prep Desert bats metagenomics Ostaizka Aizpurua1 Evie Morris Raphael Eisenhofer2 Lasse Nyholm Antton Alberdi3 Orly Razgour4 2024-05-03 Chapter 1 Introduction This webbook contains all the code used for the study on the comparison of 16S amplicon sequencing and genome-resolved metagenomics in desert bats. 1.1 Prepare the R environment 1.1.1 Environment To reproduce all the analyses locally, clone this repository in your computer using: RStudio &gt; New Project &gt; Version Control &gt; Git And indicating the following git repository: https://github.com/alberdilab/desert_bats_metagenomics.git Once the R project has been created, follow the instructions and code chunks shown in this webbook. 1.1.2 Libraries The following R packages are required for the data analysis. # Base library(R.utils) library(knitr) library(tidyverse) library(devtools) library(tinytable) library(rairtable) # For tree handling library(ape) library(phyloseq) library(phytools) # For plotting library(ggplot2) library(ggrepel) library(ggpubr) library(ggnewscale) library(gridExtra) library(ggtreeExtra) library(ggtree) library(ggh4x) # For statistics library(spaa) library(vegan) library(Rtsne) library(geiger) library(hilldiv2) library(distillR) library(ANCOMBC) library(lme4) University of Copenhagen, ostaizka.aizpurua@sund.ku.dk↩︎ University of Copenhagen, raphael.eisenhofer@sund.ku.dk↩︎ University of Copenhagen, antton.alberdi@sund.ku.dk↩︎ University of Exeter, o.razgour@exeter.ac.uk↩︎ "],["prepare-data.html", "Chapter 2 Prepare data 2.1 Load data 2.2 ASV phylogeny 2.3 Alpha diversity", " Chapter 2 Prepare data 2.1 Load data Load the original data files outputted by the bioinformatic pipeline. 2.1.1 Sample metadata sample_metadata &lt;- read_tsv(&quot;data/sample_metadata.tsv&quot;) 2.1.2 ASV counts asv_counts &lt;- read_tsv(&quot;data/amplicon/asv_counts.tsv&quot;) 2.1.3 ASV taxonomy asv_taxonomy &lt;- read_tsv(&quot;data/amplicon/asv_taxonomy.tsv&quot;) %&gt;% mutate(phylum = case_when( phylum == &quot;Actinobacteriota&quot; ~ &quot;Actinomycetota&quot;, (phylum == &quot;Firmicutes&quot; &amp; class == &quot;Bacilli&quot;) ~ &quot;Bacillota&quot;, (phylum == &quot;Firmicutes&quot; &amp; class == &quot;Clostridia&quot;) ~ &quot;Bacillota_A&quot;, phylum == &quot;Proteobacteria&quot; ~ &quot;Pseudomonadota&quot;, TRUE ~ phylum)) 2.1.4 ASV tree asv_tree &lt;- read_tree(&quot;data/amplicon/asv_tree.tre&quot;) 2.1.5 Phyloseq object amplicon_phyloseq &lt;- phyloseq( otu_table(asv_counts%&gt;% column_to_rownames(var=&quot;asv&quot;), taxa_are_rows = TRUE), tax_table(asv_taxonomy %&gt;% column_to_rownames(var=&quot;asv&quot;) %&gt;% as.matrix()), sample_data(sample_metadata) %&gt;% column_to_rownames(var=&quot;sample&quot;)) phylum_colors &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% mutate(phylum = str_remove(phylum, &quot;p__&quot;)) %&gt;% right_join(asv_taxonomy, by=join_by(phylum == phylum)) %&gt;% arrange(match(asv, asv_tree$tip.label)) %&gt;% select(phylum, colors) %&gt;% unique() %&gt;% arrange(phylum) %&gt;% pull(colors, name=phylum) 2.2 ASV phylogeny # Generate the phylum color heatmap phylum_heatmap &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% right_join(asv_taxonomy, by=join_by(phylum == phylum)) %&gt;% arrange(match(asv, asv_tree$tip.label)) %&gt;% select(asv,phylum) %&gt;% mutate(phylum = factor(phylum, levels = unique(phylum))) %&gt;% column_to_rownames(var = &quot;asv&quot;) asv_tree_ultrametric &lt;- asv_tree %&gt;% keep.tip(., tip=sample(asv_tree$tip.label, 500)) %&gt;% #subsample for the sake of visualisation drop.tip(., tip=c(&quot;ASV_6645&quot;,&quot;ASV_6419&quot;)) %&gt;% force.ultrametric(asv_tree, method=&quot;extend&quot;) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** tip_branches &lt;- asv_tree_ultrametric$edge.length[sapply(1:length(asv_tree_ultrametric$tip.label),function(x,y) which (y==x),y=asv_tree_ultrametric$edge[,2])] tip_branches_new &lt;- pmax(0,tip_branches - min(tip_branches)) asv_tree_ultrametric$edge.length[sapply(1:length(asv_tree_ultrametric$tip.label),function(x,y) which (y==x),y=asv_tree_ultrametric$edge[,2])] &lt;- tip_branches_new # Generate basal tree circular_tree &lt;- asv_tree_ultrametric %&gt;% # extend to ultrametric for the sake of visualisation ggtree(., layout=&quot;fan&quot;, open.angle=10, size=0.2) # Add phylum ring circular_tree &lt;- gheatmap(circular_tree, phylum_heatmap, offset=0.55, width=0.1, colnames=FALSE) + scale_fill_manual(values=phylum_colors) + geom_tiplab2(size=1, hjust=-0.1) + theme(legend.position = &quot;none&quot;, plot.margin = margin(0, 0, 0, 0), panel.margin = margin(0, 0, 0, 0)) # Flush color scale to enable a new color scheme in the next ring circular_tree &lt;- circular_tree + new_scale_fill() #Plot circular tree circular_tree %&gt;% open_tree(30) %&gt;% rotate_tree(90) 2.2.1 Taxonomy barplot asv_counts %&gt;% mutate_at(vars(-asv),~./sum(.)) %&gt;% pivot_longer(-asv, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% left_join(asv_taxonomy, by = join_by(asv == asv)) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% ggplot(aes(y=count,x=sample, fill=phylum, group=phylum)) + #grouping enables keeping the same sorting of taxonomic units geom_bar(stat=&quot;identity&quot;, colour=&quot;white&quot;, linewidth=0.1) + #plot stacked bars with white borders scale_fill_manual(values=phylum_colors) + labs(x = &quot;Relative abundance&quot;, y =&quot;Samples&quot;) + facet_nested(. ~ bat_species, scales=&quot;free&quot;, space=&quot;free&quot;) + #facet per day and treatment scale_y_continuous(expand = c(0.001, 0.001)) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), axis.title.x = element_blank(), panel.background = element_blank(), panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(linewidth = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), legend.position = &quot;none&quot;, strip.background.x=element_rect(color = NA, fill= &quot;#f4f4f4&quot;)) 2.3 Alpha diversity # Calculate Hill numbers richness &lt;- asv_counts %&gt;% column_to_rownames(var = &quot;asv&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 0) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(richness = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) neutral &lt;- asv_counts %&gt;% column_to_rownames(var = &quot;asv&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 1) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(neutral = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) phylogenetic &lt;- asv_counts %&gt;% column_to_rownames(var = &quot;asv&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 1, tree = asv_tree) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(phylogenetic = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) # Merge all metrics alpha_div_amplicon &lt;- richness %&gt;% full_join(neutral, by = join_by(sample == sample)) %&gt;% full_join(phylogenetic, by = join_by(sample == sample)) "],["prepare-data-1.html", "Chapter 3 Prepare data 3.1 Load data 3.2 Create working objects 3.3 Prepare color scheme 3.4 Wrap working objects", " Chapter 3 Prepare data 3.1 Load data Load the original data files outputted by the bioinformatic pipeline. 3.1.1 Sample metadata sample_metadata &lt;- read_tsv(&quot;data/sample_metadata.tsv&quot;) 3.1.2 Read counts read_counts &lt;- read_tsv(&quot;data/metagenomics/read_counts.tsv&quot;) 3.1.3 Genome coverage genome_coverage &lt;- read_tsv(&quot;data/metagenomics/genome_coverage.tsv&quot;) 3.1.4 Genome taxonomy genome_taxonomy &lt;- read_tsv(&quot;data/metagenomics/genome_taxonomy.tsv&quot;) %&gt;% select(user_genome,classification) %&gt;% separate(classification, c(&quot;domain&quot;,&quot;phylum&quot;,&quot;class&quot;,&quot;order&quot;,&quot;family&quot;,&quot;genus&quot;,&quot;species&quot;), sep =&quot;;&quot;) %&gt;% rename(genome=1) %&gt;% mutate(genome = str_remove(genome, &quot;\\\\.fa$&quot;)) 3.1.5 Genome quality genome_quality &lt;- read_tsv(&quot;data/metagenomics/genome_quality.tsv&quot;) 3.1.6 Genome metadata genome_metadata &lt;- inner_join(genome_taxonomy,genome_quality,by=join_by(genome==genome)) %&gt;% select(-c(lineage,binner)) %&gt;% rename(length=size) 3.1.7 Genome tree genome_tree &lt;- read_tree(&quot;data/metagenomics/genome_tree.tre&quot;) genome_tree$tip.label &lt;- str_replace_all(genome_tree$tip.label,&quot;&#39;&quot;, &quot;&quot;) #remove single quotes in MAG names genome_tree$tip.label &lt;- str_remove(genome_tree$tip.label, &quot;\\\\.fa$&quot;) #remove .fa suffix genome_tree &lt;- keep.tip(genome_tree, tip=genome_taxonomy$genome) # keep only MAG tips 3.1.8 Genome annotations genome_annotations &lt;- read_tsv(&quot;data/metagenomics/genome_annotations.tsv.xz&quot;) %&gt;% rename(gene=1, genome=2, contig=3) 3.1.9 Preprocessing statistics sample_preprocessing &lt;- read_tsv(&quot;data/metagenomics/preprocessing_stats.tsv&quot;) %&gt;% mutate(host_bases=host_reads*300) 3.2 Create working objects Transform the original data files into working objects for downstream analyses. 3.2.1 Filter reads by coverage min_coverage=0.3 read_counts_filt &lt;- genome_coverage %&gt;% mutate(across(where(is.numeric), ~ ifelse(. &gt; min_coverage, 1, 0))) %&gt;% mutate(across(-1, ~ . * read_counts[[cur_column()]])) 3.2.2 Transform reads into genome counts readlength=150 genome_counts &lt;- read_counts %&gt;% mutate(across(where(is.numeric), ~ . / (genome_metadata$length / readlength) )) readlength=150 genome_counts_filt &lt;- read_counts_filt %&gt;% mutate(across(where(is.numeric), ~ . / (genome_metadata$length / readlength) )) 3.2.3 Distill annotations into GIFTs genome_gifts &lt;- distill(genome_annotations,GIFT_db,genomecol=2,annotcol=c(9,10,19), verbosity=F) Identifiers in the annotation table: 1810 Identifiers in the database: 1547 Identifiers in both: 259 Percentage of annotation table identifiers used for distillation: 14.31% Percentage of database identifiers used for distillation: 16.74% 3.3 Prepare color scheme AlberdiLab projects use unified color schemes developed for the Earth Hologenome Initiative, to facilitate figure interpretation. phylum_colors &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% arrange(match(genome, genome_tree$tip.label)) %&gt;% select(phylum, colors) %&gt;% unique() %&gt;% arrange(phylum) %&gt;% pull(colors, name=phylum) 3.4 Wrap working objects All working objects are wrapped into a single Rdata object to facilitate downstream usage. save(sample_metadata, sample_preprocessing, genome_metadata, read_counts, genome_counts, genome_counts_filt, genome_tree, genome_gifts, phylum_colors, file = &quot;data/metagenomics/data.Rdata&quot;) "],["data-statistics.html", "Chapter 4 Data statistics 4.1 Sequencing reads statistics 4.2 DNA fractions", " Chapter 4 Data statistics load(&quot;data/metagenomics/data.Rdata&quot;) 4.1 Sequencing reads statistics sample_preprocessing %&gt;% summarise(Total=sum(reads_post_filt * 150 / 1000000000) %&gt;% round(2), mean=mean(reads_post_filt * 150 / 1000000000) %&gt;% round(2), sd=sd(reads_post_filt * 150 / 1000000000) %&gt;% round(2)) %&gt;% unite(&quot;Average&quot;,mean, sd, sep = &quot; ± &quot;, remove = TRUE) %&gt;% tt() tinytable_wasobxe2p3ycvuoo1u4j .table td.tinytable_css_bm3y5dphtrcwuixkyu4c, .table th.tinytable_css_bm3y5dphtrcwuixkyu4c { border-bottom: solid 0.1em #d3d8dc; } Total Average 712.18 7.83 ± 8.08 4.2 DNA fractions sequence_fractions &lt;- read_counts %&gt;% pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;value&quot;) %&gt;% group_by(sample) %&gt;% summarise(mags = sum(value)) %&gt;% left_join(sample_preprocessing, by = join_by(sample == sample)) %&gt;% select(sample,mags,bases_pre_filt,bases_post_filt,host_bases,metagenomic_bases) %&gt;% mutate(mags_bases = mags*150) %&gt;% mutate(lowqual_bases = bases_pre_filt - bases_post_filt) %&gt;% mutate(unmapped_bases = metagenomic_bases - mags_bases) %&gt;% mutate(unmapped_bases = ifelse(unmapped_bases &lt; 0, 0, unmapped_bases)) %&gt;% select(sample, lowqual_bases, host_bases, unmapped_bases, mags_bases) sequence_fractions %&gt;% mutate_at(vars(-sample), ~./1000000000) %&gt;% rename(&quot;Sample&quot;=1, &quot;Low quality&quot;=2, &quot;Mapped to host&quot;=3, &quot;Unmapped&quot;=4, &quot;Mapped to MAGs&quot;=5) %&gt;% tt() tinytable_bdag41ovx8cmkgusile1 .table td.tinytable_css_e1wyfypkkclyhfmhlla8, .table th.tinytable_css_e1wyfypkkclyhfmhlla8 { border-bottom: solid 0.1em #d3d8dc; } Sample Low quality Mapped to host Unmapped Mapped to MAGs E18 4.7850204 6.9637290 24.05986617 0.52864665 E25 1.5376473 7.9804608 6.00871944 0.85221990 E27 0.4230030 0.0911577 1.95160083 0.44069160 E30 1.7928992 1.4413299 4.00947792 5.12918235 E31 0.6816818 0.0320553 0.50570530 2.84763450 E34 2.1948529 0.8249310 11.67502744 2.54218275 E44 0.4234418 5.9270472 0.44183940 0.24959295 E48 2.3197861 1.9469865 7.44564809 5.90044110 E56 0.5108719 0.0847401 1.09609707 1.82499015 E58 0.4880990 2.1264312 1.36506017 0.11759265 H06 0.2841785 2.0398764 1.46660757 0.01427955 H07 1.4500404 10.9416210 3.39146197 0.01941135 H08 0.5011987 0.2131668 0.57356153 0.45570180 H09 1.2653958 10.8166410 7.00507483 0.15877860 H10 0.7942211 1.3782558 4.03545973 0.11882340 H12 2.5813911 8.4009948 4.51254046 0.84020835 H16 2.1486462 4.0113864 9.56424671 3.69521370 H19 0.5557962 4.2411288 2.50314959 0.02286150 H20 0.9677842 4.3890999 3.78083553 0.07778835 H23 0.9420728 3.9595926 1.30102424 0.29551170 H25 1.0738812 7.7087100 3.42255644 0.68422815 H32 0.5427161 5.8415880 1.38975295 0.06290070 H34 1.3188004 12.4245048 5.12752821 0.02616405 H37 2.5737627 27.8754720 9.15837446 0.25084785 H39 0.2938515 2.4124689 0.75581958 0.02116935 H40 1.1315544 3.8592006 5.83728129 0.42791340 H43 0.7161526 6.3701718 2.50320009 0.03324300 H45 0.9215094 1.5407343 3.94772969 0.81685470 H47 0.9581476 5.6254728 2.15816743 0.32372385 P01 0.5733407 1.8086574 1.33450269 0.76149270 P05 1.1668645 9.3271338 0.63288528 0.36958890 P09 0.7574713 7.1642826 0.52521364 0.04058895 P14 0.5034011 3.8678286 0.03866504 0.64239540 P25 0.2950900 4.5486294 0.50927300 0.38403045 P33 3.3222731 33.2508960 7.86558092 0.43485525 P34 0.3459813 0.8618043 1.84351514 0.01439085 P36 1.2281449 10.5844332 0.28646419 0.71007735 P43 3.4204299 3.2932512 7.78711290 13.30940625 P45 1.6790221 2.9649723 5.42286382 0.12008145 P47 0.4775963 2.8718187 1.06401988 0.80290395 P48 3.0192702 0.9945204 17.82268997 6.15753405 P51 1.8101944 8.2580928 3.46629537 2.64862665 P53 1.5688483 24.5797020 2.14349384 0.12960855 P58 0.7963638 6.4119048 1.11305236 0.07796910 P60 2.3930517 33.2359848 8.57518064 0.20491080 P64 0.2656280 0.3023889 1.17634560 0.47208750 P65 0.4114934 0.2113239 0.89754587 1.90757895 P67 1.7026024 17.3557032 0.62786285 2.02223145 P72 0.2702016 3.9134910 0.57524887 0.20525790 P75 1.4392490 2.6274414 6.26632261 1.62440925 P79 1.7376207 12.1993284 7.73575004 1.52807535 sequence_fractions %&gt;% pivot_longer(!sample, names_to = &quot;fraction&quot;, values_to = &quot;value&quot;) %&gt;% mutate(value = value / 1000000000) %&gt;% mutate(fraction = factor(fraction, levels = c(&quot;lowqual_bases&quot;,&quot;host_bases&quot;,&quot;unmapped_bases&quot;,&quot;mags_bases&quot;))) %&gt;% ggplot(., aes(x = sample, y = value, fill=fraction)) + geom_bar(position=&quot;stack&quot;, stat = &quot;identity&quot;) + scale_fill_manual(name=&quot;Sequence type&quot;, breaks=c(&quot;lowqual_bases&quot;,&quot;host_bases&quot;,&quot;unmapped_bases&quot;,&quot;mags_bases&quot;), labels=c(&quot;Low quality&quot;,&quot;Mapped to host&quot;,&quot;Unmapped&quot;,&quot;Mapped to MAGs&quot;), values=c(&quot;#CCCCCC&quot;, &quot;#bcdee1&quot;, &quot;#d8b8a3&quot;,&quot;#93655c&quot;))+ labs(x = &quot;Samples&quot;, y = &quot;Amount of data (GB)&quot;) + theme_classic() + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1, size=6),legend.position = &quot;bottom&quot;) tinytable_ibsheed7tzvwdx9aaf2r .table td.tinytable_css_7gpdpthld94x0dq519xr, .table th.tinytable_css_7gpdpthld94x0dq519xr { border-bottom: solid 0.1em #d3d8dc; } bat_species mean_host_perc sd_host_perc max_host_perc min_host_perc Eptesicus bottae 17.20026 24.00217 74.55613 0.39599794 Hypsugo ariel 36.45110 16.35553 58.92606 6.53771139 Pipistrellus kuhlii 43.54900 27.90509 78.35920 1.81265533 NA 45.52395 33.97328 92.13648 0.02651141 "],["mag-catalogue.html", "Chapter 5 MAG catalogue 5.1 Genome phylogeny 5.2 Genome quality 5.3 Functional overview 5.4 Functional ordination", " Chapter 5 MAG catalogue load(&quot;data/metagenomics/data.Rdata&quot;) 5.1 Genome phylogeny # Generate the phylum color heatmap phylum_heatmap &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% arrange(match(genome, genome_tree$tip.label)) %&gt;% select(genome,phylum) %&gt;% mutate(phylum = factor(phylum, levels = unique(phylum))) %&gt;% column_to_rownames(var = &quot;genome&quot;) # Generate basal tree circular_tree &lt;- force.ultrametric(genome_tree, method=&quot;extend&quot;) %&gt;% # extend to ultrametric for the sake of visualisation ggtree(., layout=&quot;fan&quot;, open.angle=10, size=0.5) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** # Add phylum ring circular_tree &lt;- gheatmap(circular_tree, phylum_heatmap, offset=0.55, width=0.1, colnames=FALSE) + scale_fill_manual(values=phylum_colors) + geom_tiplab2(size=1, hjust=-0.1) + theme(legend.position = &quot;none&quot;, plot.margin = margin(0, 0, 0, 0), panel.margin = margin(0, 0, 0, 0)) # Flush color scale to enable a new color scheme in the next ring circular_tree &lt;- circular_tree + new_scale_fill() # Add completeness ring circular_tree &lt;- circular_tree + new_scale_fill() + scale_fill_gradient(low = &quot;#d1f4ba&quot;, high = &quot;#f4baba&quot;) + geom_fruit( data=genome_metadata, geom=geom_bar, mapping = aes(x=completeness, y=genome, fill=contamination), offset = 0.55, orientation=&quot;y&quot;, stat=&quot;identity&quot;) # Add genome-size ring circular_tree &lt;- circular_tree + new_scale_fill() + scale_fill_manual(values = &quot;#cccccc&quot;) + geom_fruit( data=genome_metadata, geom=geom_bar, mapping = aes(x=length, y=genome), offset = 0.05, orientation=&quot;y&quot;, stat=&quot;identity&quot;) # Add text circular_tree &lt;- circular_tree + annotate(&#39;text&#39;, x=2.7, y=0, label=&#39; Phylum&#39;, family=&#39;arial&#39;, size=3.5) + annotate(&#39;text&#39;, x=3.1, y=0, label=&#39; Genome quality&#39;, family=&#39;arial&#39;, size=3.5) + annotate(&#39;text&#39;, x=3.5, y=0, label=&#39; Genome size&#39;, family=&#39;arial&#39;, size=3.5) #Plot circular tree circular_tree %&gt;% open_tree(30) %&gt;% rotate_tree(90) 5.2 Genome quality genome_metadata %&gt;% summarise(completeness_mean=mean(completeness) %&gt;% round(2) %&gt;% as.character(), completeness_sd=sd(completeness) %&gt;% round(2) %&gt;% as.character(), contamination_mean=mean(contamination) %&gt;% round(2), contamination_sd=sd(contamination) %&gt;% round(2)) %&gt;% unite(&quot;Completeness&quot;,completeness_mean, completeness_sd, sep = &quot; ± &quot;, remove = TRUE) %&gt;% unite(&quot;Contamination&quot;,contamination_mean, contamination_sd, sep = &quot; ± &quot;, remove = TRUE) %&gt;% tt() tinytable_0u09hnf9bzmloanuezbr .table td.tinytable_css_y2akodu0hh6zbdm7c6s4, .table th.tinytable_css_y2akodu0hh6zbdm7c6s4 { border-bottom: solid 0.1em #d3d8dc; } Completeness Contamination 91.63 ± 8.33 1.89 ± 1.84 #Generate quality biplot genome_biplot &lt;- genome_metadata %&gt;% select(c(genome,domain,phylum,completeness,contamination,length)) %&gt;% arrange(match(genome, rev(genome_tree$tip.label))) %&gt;% #sort MAGs according to phylogenetic tree ggplot(aes(x=completeness,y=contamination,size=length,color=phylum)) + geom_point(alpha=0.7) + ylim(c(10,0)) + scale_color_manual(values=phylum_colors) + labs(y= &quot;Contamination&quot;, x = &quot;Completeness&quot;) + theme_classic() + theme(legend.position = &quot;none&quot;) #Generate contamination boxplot genome_contamination &lt;- genome_metadata %&gt;% ggplot(aes(y=contamination)) + ylim(c(10,0)) + geom_boxplot(colour = &quot;#999999&quot;, fill=&quot;#cccccc&quot;) + theme_void() + theme(legend.position = &quot;none&quot;, axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank(), plot.margin = unit(c(0, 0, 0.40, 0),&quot;inches&quot;)) #add bottom-margin (top, right, bottom, left) #Generate completeness boxplot genome_completeness &lt;- genome_metadata %&gt;% ggplot(aes(x=completeness)) + xlim(c(50,100)) + geom_boxplot(colour = &quot;#999999&quot;, fill=&quot;#cccccc&quot;) + theme_void() + theme(legend.position = &quot;none&quot;, axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank(), plot.margin = unit(c(0, 0, 0, 0.50),&quot;inches&quot;)) #add left-margin (top, right, bottom, left) #Render composite figure grid.arrange(grobs = list(genome_completeness,genome_biplot,genome_contamination), layout_matrix = rbind(c(1,1,1,1,1,1,1,1,1,1,1,4), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3))) 5.3 Functional overview # Aggregate basal GIFT into elements function_table &lt;- genome_gifts %&gt;% to.elements(., GIFT_db) # Generate basal tree function_tree &lt;- force.ultrametric(genome_tree, method=&quot;extend&quot;) %&gt;% ggtree(., size = 0.3) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** #Add phylum colors next to the tree tips function_tree &lt;- gheatmap(function_tree, phylum_heatmap, offset=0, width=0.1, colnames=FALSE) + scale_fill_manual(values=phylum_colors) + labs(fill=&quot;Phylum&quot;) #Reset fill scale to use a different colour profile in the heatmap function_tree &lt;- function_tree + new_scale_fill() #Add functions heatmap function_tree &lt;- gheatmap(function_tree, function_table, offset=0.5, width=3.5, colnames=FALSE) + vexpand(.08) + coord_cartesian(clip = &quot;off&quot;) + scale_fill_gradient(low = &quot;#f4f4f4&quot;, high = &quot;steelblue&quot;, na.value=&quot;white&quot;) + labs(fill=&quot;GIFT&quot;) #Reset fill scale to use a different colour profile in the heatmap function_tree &lt;- function_tree + new_scale_fill() # Add completeness barplots function_tree &lt;- function_tree + geom_fruit(data=genome_metadata, geom=geom_bar, grid.params=list(axis=&quot;x&quot;, text.size=2, nbreak = 1), axis.params=list(vline=TRUE), mapping = aes(x=length, y=genome, fill=completeness), offset = 3.8, orientation=&quot;y&quot;, stat=&quot;identity&quot;) + scale_fill_gradient(low = &quot;#cf8888&quot;, high = &quot;#a2cc87&quot;) + labs(fill=&quot;Genome\\ncompleteness&quot;) function_tree 5.4 Functional ordination # Generate the tSNE ordination tSNE_function &lt;- Rtsne(X=function_table, dims = 2, check_duplicates = FALSE) # Plot the ordination function_ordination &lt;- tSNE_function$Y %&gt;% as.data.frame() %&gt;% mutate(genome=rownames(function_table)) %&gt;% inner_join(genome_metadata, by=&quot;genome&quot;) %&gt;% rename(tSNE1=&quot;V1&quot;, tSNE2=&quot;V2&quot;) %&gt;% select(genome,phylum,tSNE1,tSNE2, length) %&gt;% ggplot(aes(x = tSNE1, y = tSNE2, color = phylum, size=length))+ geom_point(shape=16, alpha=0.7) + scale_color_manual(values=phylum_colors) + theme_minimal() + labs(color=&quot;Phylum&quot;, size=&quot;Genome size&quot;) + guides(color = guide_legend(override.aes = list(size = 5))) # enlarge Phylum dots in legend function_ordination "],["taxonomic-composition.html", "Chapter 6 Taxonomic composition 6.1 Taxonomy boxplot", " Chapter 6 Taxonomic composition load(&quot;data/metagenomics/data.Rdata&quot;) 6.0.1 Taxonomy barplot per individual genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS nornalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% #reduce to minimum number of columns left_join(., genome_metadata, by = join_by(genome == genome)) %&gt;% #append genome metadata left_join(., sample_metadata, by = join_by(sample == sample)) %&gt;% #append sample metadata filter(!is.na(count)) %&gt;% ggplot(aes(y=count,x=sample, fill=phylum, group=phylum)) + #grouping enables keeping the same sorting of taxonomic units geom_bar(stat=&quot;identity&quot;, colour=&quot;white&quot;, linewidth=0.1) + #plot stacked bars with white borders scale_fill_manual(values=phylum_colors) + labs(x = &quot;Relative abundance&quot;, y =&quot;Samples&quot;) + facet_nested(. ~ bat_species, scales=&quot;free&quot;, space=&quot;free&quot;) + #facet per day and treatment scale_y_continuous(expand = c(0.001, 0.001)) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), axis.title.x = element_blank(), panel.background = element_blank(), panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(linewidth = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), legend.position = &quot;none&quot;, strip.background.x=element_rect(color = NA, fill= &quot;#f4f4f4&quot;)) 6.1 Taxonomy boxplot 6.1.1 Family family_summary &lt;- genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS nornalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% #reduce to minimum number of columns left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% #append sample metadata left_join(., genome_metadata, by = join_by(genome == genome)) %&gt;% #append genome metadata group_by(sample,family) %&gt;% summarise(relabun=sum(count)) family_summary %&gt;% filter(!is.na(relabun)) %&gt;% group_by(family) %&gt;% summarise(mean=mean(relabun),sd=sd(relabun)) %&gt;% mutate(family= sub(&quot;^f__&quot;, &quot;&quot;, family)) %&gt;% arrange(-mean) %&gt;% tt() tinytable_dpop2esye0al3d6m3cvo .table td.tinytable_css_lll0i9fja2svtg2dct6n, .table th.tinytable_css_lll0i9fja2svtg2dct6n { border-bottom: solid 0.1em #d3d8dc; } family mean sd Diplorickettsiaceae 2.066430e-01 0.3630831186 Enterobacteriaceae 1.893277e-01 0.3066240395 Rickettsiaceae 8.145172e-02 0.2374167586 Vibrionaceae 7.972825e-02 0.2063738722 Mycoplasmoidaceae 4.314658e-02 0.1816972619 Chromatiaceae 3.786770e-02 0.1871226759 Desulfovibrionaceae 2.805650e-02 0.0759014047 Pasteurellaceae 2.746922e-02 0.1061643096 Weeksellaceae 2.724435e-02 0.1486394013 Burkholderiaceae 2.703566e-02 0.1383404820 Mycoplasmataceae 2.582675e-02 0.1187781701 Enterococcaceae 2.018684e-02 0.0706119540 Aeromonadaceae 2.015713e-02 0.0692033892 Dysgonomonadaceae 1.896333e-02 0.0497917479 Metamycoplasmataceae 1.831217e-02 0.1281864393 Helicobacteraceae 1.630153e-02 0.1107680426 Anaplasmataceae 1.554908e-02 0.0927522928 Tannerellaceae 1.549917e-02 0.0535737293 Acetobacteraceae 1.360257e-02 0.0967742539 Adiutricaceae 1.182852e-02 0.0349008385 Rhizobiaceae 9.108139e-03 0.0366543408 Leptotrichiaceae 7.074750e-03 0.0196300205 Bacteroidaceae 6.853804e-03 0.0364486712 Lachnospiraceae 6.496660e-03 0.0247911875 Synergistaceae 5.587881e-03 0.0174072370 UBA932 5.565920e-03 0.0216533335 Neisseriaceae 5.157037e-03 0.0268237187 Streptococcaceae 3.499662e-03 0.0202503299 Oscillospiraceae 2.692306e-03 0.0115704557 2.309250e-03 0.0058956882 Burkholderiaceae_B 2.235806e-03 0.0071724137 Gemellaceae 2.121398e-03 0.0106187686 Rhodocyclaceae 1.968326e-03 0.0113503074 Halomonadaceae 1.883561e-03 0.0134513161 Microcoleaceae 1.849207e-03 0.0092981482 Ruminococcaceae 1.549323e-03 0.0059246842 Erysipelotrichaceae 1.340191e-03 0.0046796931 Acutalibacteraceae 1.217931e-03 0.0040092177 Elusimicrobiaceae 1.081020e-03 0.0070276238 Christensenellaceae 9.622707e-04 0.0065229596 Micrococcaceae 8.277861e-04 0.0059115751 SZUA-567 7.768563e-04 0.0041153802 Mucispirillaceae 7.025020e-04 0.0035261340 Fusobacteriaceae 6.907455e-04 0.0029637575 WRBN01 3.657439e-04 0.0026119337 Beijerinckiaceae 3.384698e-04 0.0016917143 Anaerotignaceae 3.244078e-04 0.0012663030 Rikenellaceae 3.236972e-04 0.0017316093 Clostridiaceae 2.328503e-04 0.0016628836 Cyanobiaceae 1.713001e-04 0.0009579297 Endomicrobiaceae 1.568425e-04 0.0010127663 CAG-508 9.142321e-05 0.0006528923 Campylobacteraceae 8.972836e-05 0.0004001237 UBA660 7.911019e-05 0.0005125600 CAG-239 7.629402e-05 0.0005448483 family_arrange &lt;- family_summary %&gt;% filter(!is.na(relabun)) %&gt;% group_by(family) %&gt;% summarise(mean=sum(relabun)) %&gt;% arrange(-mean) %&gt;% select(family) %&gt;% mutate(family= sub(&quot;^f__&quot;, &quot;&quot;, family)) %&gt;% pull() family_summary %&gt;% left_join(genome_metadata %&gt;% select(family,phylum) %&gt;% unique(),by=join_by(family==family)) %&gt;% left_join(sample_metadata,by=join_by(sample==sample)) %&gt;% mutate(family= sub(&quot;^f__&quot;, &quot;&quot;, family)) %&gt;% filter(family %in% family_arrange[1:20]) %&gt;% mutate(family=factor(family,levels=rev(family_arrange[1:20]))) %&gt;% filter(relabun &gt; 0) %&gt;% ggplot(aes(x=relabun, y=family, group=family, color=phylum, fill=phylum)) + scale_color_manual(values=phylum_colors[-8]) + scale_fill_manual(values=phylum_colors[-8]) + geom_boxplot(alpha=0.2) + geom_jitter(alpha=0.5) + facet_nested(. ~ bat_species)+ theme_minimal() + theme(legend.position = &quot;none&quot;) 6.1.2 Genus genus_summary &lt;- genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS nornalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% #reduce to minimum number of columns left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% #append sample metadata left_join(genome_metadata, by = join_by(genome == genome)) %&gt;% #append genome metadata group_by(sample,genus) %&gt;% summarise(relabun=sum(count)) %&gt;% filter(genus != &quot;g__&quot;) genus_summary %&gt;% filter(!is.na(relabun)) %&gt;% group_by(genus) %&gt;% summarise(mean=mean(relabun),sd=sd(relabun)) %&gt;% arrange(-mean) %&gt;% tt() tinytable_twr680kqi1xhyy7gfl7u .table td.tinytable_css_gimszfg3x3i5v5103ctu, .table th.tinytable_css_gimszfg3x3i5v5103ctu { border-bottom: solid 0.1em #d3d8dc; } genus mean sd g__Aquirickettsiella 2.066430e-01 0.3630831186 g__Rickettsia 8.145172e-02 0.2374167586 g__Vibrio 7.972825e-02 0.2063738722 g__Malacoplasma 4.314658e-02 0.1816972619 g__Serratia 3.781432e-02 0.1442735807 g__Klebsiella 3.527392e-02 0.1609844058 g__Proteus 3.502862e-02 0.1388093531 g__Apibacter 2.724435e-02 0.1486394013 g__Aeromonas 2.015713e-02 0.0692033892 g__Dysgonomonas 1.896333e-02 0.0497917479 g__UBA710 1.831217e-02 0.1281864393 g__Morganella 1.639039e-02 0.0700801355 g__Enterococcus 1.584941e-02 0.0498525505 g__NHYM01 1.552127e-02 0.1108440094 g__Edwardiiplasma 1.517989e-02 0.1073274591 g__Aggregatibacter 1.425805e-02 0.0847502171 g__Tannerella 1.333155e-02 0.0496532992 g__Pasteurella 1.321117e-02 0.0668769540 g__Providencia 1.317104e-02 0.0825454378 g__FLUQ01 1.244851e-02 0.0380568384 g__Mesenet 1.197438e-02 0.0855141593 g__Arsenophonus 1.191432e-02 0.0823521277 g__Adiutrix 1.182852e-02 0.0349008385 g__Spiroplasma 1.064685e-02 0.0532973801 g__Jejubacter 9.570393e-03 0.0478520370 g__Pseudocitrobacter 8.760620e-03 0.0574285139 g__Frigididesulfovibrio 7.889555e-03 0.0203162078 g__WRHT01 7.718438e-03 0.0221726222 g__Sebaldella 7.074750e-03 0.0196300205 g__Paraburkholderia 6.910657e-03 0.0459867188 g__Bacteroides 5.902028e-03 0.0311091136 g__Citrobacter_A 5.809507e-03 0.0216896385 g__Escherichia 5.512404e-03 0.0357559173 g__Neisseria 5.157037e-03 0.0268237187 g__Caballeronia 3.971317e-03 0.0283608787 g__Orbus 3.915117e-03 0.0279595306 g__Wolbachia 3.574704e-03 0.0121363242 g__Lactococcus 3.499662e-03 0.0202503299 g__CALYQQ01 3.073067e-03 0.0165504095 g__Enterococcus_B 2.505891e-03 0.0178956403 g__Enterobacillus 2.297797e-03 0.0121221737 g__Saezia 2.235806e-03 0.0071724137 g__DFXE01 2.167618e-03 0.0154798861 g__Trinickia 2.120753e-03 0.0106036233 g__WQUU01 1.905223e-03 0.0087650731 g__Zymobacter 1.883561e-03 0.0134513161 g__Planktothrix 1.849207e-03 0.0092981482 g__Enterococcus_D 1.831542e-03 0.0108315120 g__Breznakia 1.340191e-03 0.0046796931 g__Scatolibacter 1.217931e-03 0.0040092177 g__WRAV01 1.054847e-03 0.0056761271 g__QANA01 9.622707e-04 0.0065229596 g__UBA1794 9.517755e-04 0.0059502884 g__Acaricomes 8.277861e-04 0.0059115751 g__GCA-022846635 7.962132e-04 0.0044153137 g__UBA1174 7.876488e-04 0.0049458893 g__Helicobacter_C 7.802691e-04 0.0028054940 g__JAJBSZ01 7.768563e-04 0.0041153802 g__Fusobacterium_A 6.907455e-04 0.0029637575 g__Tokpelaia_A 5.169962e-04 0.0036920911 g__JAAYCI01 4.944755e-04 0.0019868365 g__JAHHUI01 3.657439e-04 0.0026119337 g__JAHZDZ01 3.244078e-04 0.0012663030 g__JAJQAW01 3.236972e-04 0.0017316093 g__Elusimicrobium 2.933708e-04 0.0020950863 g__Sarcina 2.328503e-04 0.0016628836 g__Vulcanococcus 1.713001e-04 0.0009579297 g__Lawsonibacter 1.704014e-04 0.0008167847 g__Endomicrobium 1.568425e-04 0.0010127663 g__CHH4-2 1.498779e-04 0.0010703421 g__Entomobacter 5.048026e-05 0.0001942887 g__Fusobacterium_C 0.000000e+00 0.0000000000 g__Helicobacter_G 0.000000e+00 0.0000000000 g__Photobacterium 0.000000e+00 0.0000000000 genus_arrange &lt;- genus_summary %&gt;% group_by(genus) %&gt;% summarise(mean=sum(relabun)) %&gt;% filter(genus != &quot;g__&quot;)%&gt;% arrange(-mean) %&gt;% select(genus) %&gt;% mutate(genus= sub(&quot;^g__&quot;, &quot;&quot;, genus)) %&gt;% pull() genus_summary %&gt;% left_join(genome_metadata %&gt;% select(genus,phylum) %&gt;% unique(),by=join_by(genus==genus)) %&gt;% left_join(sample_metadata,by=join_by(sample==sample)) %&gt;% mutate(genus= sub(&quot;^g__&quot;, &quot;&quot;, genus)) %&gt;% filter(genus %in% genus_arrange[1:20]) %&gt;% mutate(genus=factor(genus,levels=rev(genus_arrange[1:20]))) %&gt;% filter(relabun &gt; 0) %&gt;% ggplot(aes(x=relabun, y=genus, group=genus, color=phylum)) + scale_color_manual(values=phylum_colors) + #geom_boxplot() + geom_jitter(alpha=0.5) + facet_nested(. ~ bat_species)+ theme_minimal() "],["diversity.html", "Chapter 7 Diversity 7.1 Alpha diversity 7.2 Beta diversity", " Chapter 7 Diversity load(&quot;data/metagenomics/data.Rdata&quot;) 7.1 Alpha diversity # Calculate Hill numbers richness &lt;- genome_counts_filt %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 0) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(richness = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) neutral &lt;- genome_counts_filt %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 1) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(neutral = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) phylogenetic &lt;- genome_counts_filt %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 1, tree = genome_tree) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(phylogenetic = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) # Aggregate basal GIFT into elements dist &lt;- genome_gifts %&gt;% to.elements(., GIFT_db) %&gt;% traits2dist(., method = &quot;gower&quot;) #functional &lt;- genome_counts_filt %&gt;% # filter(genome %in% labels(dist)[[1]]) %&gt;% # column_to_rownames(var = &quot;genome&quot;) %&gt;% # dplyr::select(where(~ !all(. == 0))) %&gt;% # hilldiv(., q = 1, dist = dist) %&gt;% # t() %&gt;% # as.data.frame() %&gt;% # dplyr::rename(functional = 1) %&gt;% # rownames_to_column(var = &quot;sample&quot;) %&gt;% # mutate(functional = if_else(is.nan(functional), 1, functional)) # Merge all metrics alpha_div_metagenomics &lt;- richness %&gt;% full_join(neutral, by = join_by(sample == sample)) %&gt;% full_join(phylogenetic, by = join_by(sample == sample)) #%&gt;% #full_join(functional, by = join_by(sample == sample)) alpha_div_metagenomics %&gt;% pivot_longer(-sample, names_to = &quot;metric&quot;, values_to = &quot;value&quot;) %&gt;% left_join(., sample_metadata, by = join_by(sample == sample)) %&gt;% mutate(metric=factor(metric,levels=c(&quot;richness&quot;,&quot;neutral&quot;,&quot;phylogenetic&quot;,&quot;functional&quot;))) %&gt;% ggplot(aes(y = value, x = bat_species, group=bat_species, color=bat_species, fill=bat_species)) + geom_boxplot(outlier.shape = NA) + geom_jitter(alpha=0.5) + scale_color_manual(name=&quot;Species&quot;, breaks=c(&quot;Pipistrellus kuhlii&quot;,&quot;Eptesicus bottae&quot;,&quot;Hypsugo ariel&quot;), labels=c(&quot;Pipistrellus kuhlii&quot;,&quot;Eptesicus bottae&quot;,&quot;Hypsugo ariel&quot;), values=c(&quot;#e5bd5b&quot;, &quot;#6b7398&quot;,&quot;#e2815a&quot;)) + scale_fill_manual(name=&quot;Species&quot;, breaks=c(&quot;Pipistrellus kuhlii&quot;,&quot;Eptesicus bottae&quot;,&quot;Hypsugo ariel&quot;), labels=c(&quot;Pipistrellus kuhlii&quot;,&quot;Eptesicus bottae&quot;,&quot;Hypsugo ariel&quot;), values=c(&quot;#e5bd5b50&quot;, &quot;#6b739850&quot;,&quot;#e2815a50&quot;)) + facet_wrap(. ~ metric, scales = &quot;free&quot;, ncol=4) + coord_cartesian(xlim = c(1, NA)) + theme_classic() + theme( strip.background = element_blank(), panel.grid.minor.x = element_line(size = .1, color = &quot;grey&quot;), axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x = element_blank()) 7.2 Beta diversity beta_q0n &lt;- genome_counts %&gt;% select(where(~!all(. == 0))) %&gt;% # remove empty samples column_to_rownames(., &quot;genome&quot;) %&gt;% hillpair(., q = 0) beta_q1n &lt;- genome_counts %&gt;% select(where(~!all(. == 0))) %&gt;% # remove empty samples column_to_rownames(., &quot;genome&quot;) %&gt;% hillpair(., q = 1) beta_q1p &lt;- genome_counts %&gt;% select(where(~!all(. == 0))) %&gt;% # remove empty samples column_to_rownames(., &quot;genome&quot;) %&gt;% hillpair(., q = 1, tree = genome_tree) beta_q1f &lt;- genome_counts %&gt;% select(where(~!all(. == 0))) %&gt;% # remove empty samples filter(genome %in% labels(dist)[[1]]) %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% hillpair(., q = 1, dist = dist) 7.2.1 Richness (q0n) tinytable_ougfb7rd4kv08x9avrbk .table td.tinytable_css_jocthn8hmkfgjuz8b0xe, .table th.tinytable_css_jocthn8hmkfgjuz8b0xe { border-bottom: solid 0.1em #d3d8dc; } Homogeneity of variances Df Sum Sq Mean Sq F N.Perm Pr(&gt;F) 2 0.002096317 0.0010481586 1.566315 999 0.227 48 0.032121016 0.0006691878 NA NA NA tinytable_uwvr7scpju4kof0c6m16 .table td.tinytable_css_ik0g9ib7tpklqtkyxly0, .table th.tinytable_css_ik0g9ib7tpklqtkyxly0 { border-bottom: solid 0.1em #d3d8dc; } Permanova term df SumOfSqs R2 statistic p.value bat_species 2 0.007009903 0.08603871 2.259318 0.013 Residual 48 0.074463917 0.91396129 NA NA Total 50 0.081473820 1.00000000 NA NA beta_q0n$C %&gt;% vegan::metaMDS(., trymax = 500, k = 2, trace = 0) %&gt;% vegan::scores() %&gt;% as_tibble(., rownames = &quot;sample&quot;) %&gt;% dplyr::left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% group_by(bat_species) %&gt;% mutate(x_cen = mean(NMDS1, na.rm = TRUE)) %&gt;% mutate(y_cen = mean(NMDS2, na.rm = TRUE)) %&gt;% ungroup() %&gt;% ggplot(aes(x = NMDS1, y = NMDS2, color = bat_species)) + scale_color_manual(values = c(&quot;#e5bd5b&quot;, &quot;#6b7398&quot;,&quot;#e2815a&quot;)) + scale_shape_manual(values = 1:10) + geom_point(size = 4) + # stat_ellipse(aes(color = beta_q1n_nmds$Groups))+ geom_segment(aes(x = x_cen, y = y_cen, xend = NMDS1, yend = NMDS2), alpha = 0.9) + theme_classic() + theme( axis.text.x = element_text(size = 12), axis.text.y = element_text(size = 12), axis.title = element_text(size = 20, face = &quot;bold&quot;), axis.text = element_text(face = &quot;bold&quot;, size = 18), panel.background = element_blank(), axis.line = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), legend.text = element_text(size = 16), legend.title = element_text(size = 18), legend.position = &quot;right&quot;, legend.box = &quot;vertical&quot; ) 7.2.2 Neutral (q1n) tinytable_25b1kapr6xepae0vs0jq .table td.tinytable_css_shktfr3gtnzhuy3eqbre, .table th.tinytable_css_shktfr3gtnzhuy3eqbre { border-bottom: solid 0.1em #d3d8dc; } Homogeneity of variances Df Sum Sq Mean Sq F N.Perm Pr(&gt;F) 2 0.2043596 0.10217979 4.995482 999 0.009 48 0.9818131 0.02045444 NA NA NA tinytable_zoyvjzxz46g63nsmf93a .table td.tinytable_css_56mpw0lo06ztnsupd5w1, .table th.tinytable_css_56mpw0lo06ztnsupd5w1 { border-bottom: solid 0.1em #d3d8dc; } Permanova term df SumOfSqs R2 statistic p.value bat_species 2 1.702184 0.0979211 2.605211 0.001 Residual 48 15.681038 0.9020789 NA NA Total 50 17.383222 1.0000000 NA NA beta_q1n$C %&gt;% vegan::metaMDS(., trymax = 500, k = 2, trace = 0) %&gt;% vegan::scores() %&gt;% as_tibble(., rownames = &quot;sample&quot;) %&gt;% dplyr::left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% group_by(bat_species) %&gt;% mutate(x_cen = mean(NMDS1, na.rm = TRUE)) %&gt;% mutate(y_cen = mean(NMDS2, na.rm = TRUE)) %&gt;% ungroup() %&gt;% ggplot(aes(x = NMDS1, y = NMDS2, color = bat_species)) + scale_color_manual(values = c(&quot;#e5bd5b&quot;, &quot;#6b7398&quot;,&quot;#e2815a&quot;)) + scale_shape_manual(values = 1:10) + geom_point(size = 4) + # stat_ellipse(aes(color = beta_q1n_nmds$Groups))+ geom_segment(aes(x = x_cen, y = y_cen, xend = NMDS1, yend = NMDS2), alpha = 0.9) + theme_classic() + theme( axis.text.x = element_text(size = 12), axis.text.y = element_text(size = 12), axis.title = element_text(size = 20, face = &quot;bold&quot;), axis.text = element_text(face = &quot;bold&quot;, size = 18), panel.background = element_blank(), axis.line = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), legend.text = element_text(size = 16), legend.title = element_text(size = 18), legend.position = &quot;right&quot;, legend.box = &quot;vertical&quot; ) 7.2.3 Phylogenetic (q1p) tinytable_z72bg2vr4ly2gmwreckz .table td.tinytable_css_68gfw7eq5kw5bkc779j2, .table th.tinytable_css_68gfw7eq5kw5bkc779j2 { border-bottom: solid 0.1em #d3d8dc; } Homogeneity of variances Df Sum Sq Mean Sq F N.Perm Pr(&gt;F) 2 0.1390146 0.06950729 3.719514 999 0.03 48 0.8969856 0.01868720 NA NA NA tinytable_u38hwahf4jvg89qva0l0 .table td.tinytable_css_5c7ud0b5sn8t3nor39rq, .table th.tinytable_css_5c7ud0b5sn8t3nor39rq { border-bottom: solid 0.1em #d3d8dc; } Permanova term df SumOfSqs R2 statistic p.value bat_species 2 0.6452775 0.08607004 2.260218 0.012 Residual 48 6.8518437 0.91392996 NA NA Total 50 7.4971212 1.00000000 NA NA beta_q1p$C %&gt;% vegan::metaMDS(., trymax = 500, k = 2, trace = 0) %&gt;% vegan::scores() %&gt;% as_tibble(., rownames = &quot;sample&quot;) %&gt;% dplyr::left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% group_by(bat_species) %&gt;% mutate(x_cen = mean(NMDS1, na.rm = TRUE)) %&gt;% mutate(y_cen = mean(NMDS2, na.rm = TRUE)) %&gt;% ungroup() %&gt;% ggplot(aes(x = NMDS1, y = NMDS2, color = bat_species)) + scale_color_manual(values = c(&quot;#e5bd5b&quot;, &quot;#6b7398&quot;,&quot;#e2815a&quot;)) + scale_shape_manual(values = 1:10) + geom_point(size = 4) + # stat_ellipse(aes(color = beta_q1n_nmds$Groups))+ geom_segment(aes(x = x_cen, y = y_cen, xend = NMDS1, yend = NMDS2), alpha = 0.9) + theme_classic() + theme( axis.text.x = element_text(size = 12), axis.text.y = element_text(size = 12), axis.title = element_text(size = 20, face = &quot;bold&quot;), axis.text = element_text(face = &quot;bold&quot;, size = 18), panel.background = element_blank(), axis.line = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), legend.text = element_text(size = 16), legend.title = element_text(size = 18), legend.position = &quot;right&quot;, legend.box = &quot;vertical&quot; ) 7.2.4 Functional (q1f) tinytable_el5fnotr03z7exf6anyb .table td.tinytable_css_4m12h40m06puf1o7dnr7, .table th.tinytable_css_4m12h40m06puf1o7dnr7 { border-bottom: solid 0.1em #d3d8dc; } Homogeneity of variances Df Sum Sq Mean Sq F N.Perm Pr(&gt;F) 2 0.02809638 0.01404819 0.266268 999 0.782 48 2.53246042 0.05275959 NA NA NA tinytable_3wt31ikfd7u4iuku9voq .table td.tinytable_css_8gh03hpi6mcu2ue128bt, .table th.tinytable_css_8gh03hpi6mcu2ue128bt { border-bottom: solid 0.1em #d3d8dc; } Permanova term df SumOfSqs R2 statistic p.value bat_species 2 1.062947 0.1351829 3.751532 0.015 Residual 48 6.800086 0.8648171 NA NA Total 50 7.863034 1.0000000 NA NA beta_q1f$C %&gt;% vegan::metaMDS(., trymax = 500, k = 2, trace = 0) %&gt;% vegan::scores() %&gt;% as_tibble(., rownames = &quot;sample&quot;) %&gt;% dplyr::left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% group_by(bat_species) %&gt;% mutate(x_cen = mean(NMDS1, na.rm = TRUE)) %&gt;% mutate(y_cen = mean(NMDS2, na.rm = TRUE)) %&gt;% ungroup() %&gt;% ggplot(aes(x = NMDS1, y = NMDS2, color = bat_species)) + scale_color_manual(values = c(&quot;#e5bd5b&quot;, &quot;#6b7398&quot;,&quot;#e2815a&quot;)) + scale_shape_manual(values = 1:10) + geom_point(size = 4) + # stat_ellipse(aes(color = beta_q1n_nmds$Groups))+ geom_segment(aes(x = x_cen, y = y_cen, xend = NMDS1, yend = NMDS2), alpha = 0.9) + theme_classic() + theme( axis.text.x = element_text(size = 12), axis.text.y = element_text(size = 12), axis.title = element_text(size = 20, face = &quot;bold&quot;), axis.text = element_text(face = &quot;bold&quot;, size = 18), panel.background = element_blank(), axis.line = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), legend.text = element_text(size = 16), legend.title = element_text(size = 18), legend.position = &quot;right&quot;, legend.box = &quot;vertical&quot; ) "],["functions.html", "Chapter 8 Functions", " Chapter 8 Functions load(&quot;data/metagenomics/data.Rdata&quot;) #Aggregate GIFT at three hierarchical levels GIFTs_elements &lt;- to.elements(genome_gifts,GIFT_db) GIFTs_functions &lt;- to.functions(GIFTs_elements,GIFT_db) GIFTs_domains &lt;- to.domains(GIFTs_functions,GIFT_db) #Calculate community-level traits GIFTs_elements_community &lt;- to.community(GIFTs_elements, genome_counts_row &lt;- genome_counts %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% tss(), GIFT_db) GIFTs_functions_community &lt;- to.community(GIFTs_functions, genome_counts_row &lt;- genome_counts %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% tss(), GIFT_db) GIFTs_domains_community &lt;- to.community(GIFTs_domains, genome_counts_row &lt;- genome_counts %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% tss(), GIFT_db) GIFTs_elements_community %&gt;% as.data.frame() %&gt;% rownames_to_column(var=&quot;sample&quot;) %&gt;% pivot_longer(!sample,names_to=&quot;trait&quot;,values_to=&quot;gift&quot;) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% mutate(functionid = substr(trait, 1, 3)) %&gt;% mutate(trait = case_when( trait %in% GIFT_db$Code_element ~ GIFT_db$Element[match(trait, GIFT_db$Code_element)], TRUE ~ trait )) %&gt;% mutate(functionid = case_when( functionid %in% GIFT_db$Code_function ~ GIFT_db$Function[match(functionid, GIFT_db$Code_function)], TRUE ~ functionid )) %&gt;% mutate(trait=factor(trait,levels=unique(GIFT_db$Element))) %&gt;% mutate(functionid=factor(functionid,levels=unique(GIFT_db$Function))) %&gt;% ggplot(aes(x=sample,y=trait,fill=gift)) + geom_tile(colour=&quot;white&quot;, linewidth=0.2)+ scale_fill_gradientn(colours=rev(c(&quot;#d53e4f&quot;, &quot;#f46d43&quot;, &quot;#fdae61&quot;, &quot;#fee08b&quot;, &quot;#e6f598&quot;, &quot;#abdda4&quot;, &quot;#ddf1da&quot;)))+ facet_grid(functionid ~ bat_species, scales=&quot;free&quot;,space=&quot;free&quot;) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), strip.text.y = element_text(angle = 0)) + labs(y=&quot;Traits&quot;,x=&quot;Samples&quot;,fill=&quot;GIFT&quot;) GIFTs_functions_community %&gt;% as.data.frame() %&gt;% rownames_to_column(var=&quot;sample&quot;) %&gt;% pivot_longer(!sample,names_to=&quot;trait&quot;,values_to=&quot;gift&quot;) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% ggplot(aes(x=trait,y=sample,fill=gift)) + geom_tile(colour=&quot;white&quot;, linewidth=0.2)+ scale_fill_gradientn(colours=rev(c(&quot;#d53e4f&quot;, &quot;#f46d43&quot;, &quot;#fdae61&quot;, &quot;#fee08b&quot;, &quot;#e6f598&quot;, &quot;#abdda4&quot;, &quot;#ddf1da&quot;)))+ facet_grid(bat_species ~ ., scales=&quot;free&quot;,space=&quot;free&quot;) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
